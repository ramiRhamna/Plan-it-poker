import { Component, ViewChild, Output, EventEmitter, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CaptchaComponent {
    constructor() {
        this.generateCode = new EventEmitter();
        this.canvas = document.createElement('canvas');
        this.letters = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
        this.code = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
        this.refresh();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.refresh();
    }
    /**
     * @return {?}
     */
    init() {
        this.canvas.width = this.width || 100;
        this.canvas.height = this.height || 50;
        this.canvas.style.cursor = 'pointer';
        this.canvas.innerHTML = '您的浏览器版本不支持canvas';
        this.container.nativeElement.appendChild(this.canvas);
    }
    // generate code
    /**
     * @return {?}
     */
    refresh() {
        this.code = '';
        /** @type {?} */
        const ctx = this.canvas.getContext('2d');
        ctx.textBaseline = 'middle';
        ctx.fillStyle = this.randomColor(180, 240);
        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        for (let i = 0; i < 4; i++) {
            /** @type {?} */
            const letter = this.letters[this.randomNum(0, this.letters.length)];
            this.code += letter;
            ctx.font = this.randomNum(this.canvas.height / 2, this.canvas.height) + 'px SimHei';
            ctx.fillStyle = this.randomColor(50, 160);
            ctx.shadowOffsetX = this.randomNum(-3, 3);
            ctx.shadowOffsetY = this.randomNum(-3, 3);
            ctx.shadowBlur = this.randomNum(-3, 3);
            ctx.shadowColor = 'rgb(0, 0, 0, 0.3)';
            /** @type {?} */
            const x = this.canvas.width / 5 * i;
            /** @type {?} */
            const y = this.canvas.height / 2;
            /** @type {?} */
            const deg = this.randomNum(-30, 30)
            // setting rotate and origin point
            ;
            // setting rotate and origin point
            ctx.translate(x, y);
            ctx.rotate(deg * Math.PI / 180);
            ctx.fillText(letter, 0, 0);
            // reset rotate and origin point
            ctx.rotate(-deg * Math.PI / 180);
            ctx.translate(-x, -y);
        }
        // draw interfering line
        for (let i = 0; i < 4; i++) {
            ctx.strokeStyle = this.randomColor(40, 180);
            ctx.beginPath();
            ctx.moveTo(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height));
            ctx.lineTo(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height));
            ctx.stroke();
        }
        // draw interfering point
        for (let i = 0; i < this.canvas.width / 4; i++) {
            ctx.fillStyle = this.randomColor();
            ctx.beginPath();
            ctx.arc(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height), 1, 0, 2 * Math.PI);
            ctx.fill();
        }
        this.generateCode.emit(this.code.toLowerCase());
    }
    /**
     * return a random integer
     * @param {?} min 最小值
     * @param {?} max 最大值
     * @return {?}
     */
    randomNum(min, max) {
        return Math.floor(Math.random() * (max - min) + min);
    }
    /**
     * return a random color
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    randomColor(min = 0, max = 255) {
        /** @type {?} */
        const r = this.randomNum(min, max);
        /** @type {?} */
        const g = this.randomNum(min, max);
        /** @type {?} */
        const b = this.randomNum(min, max);
        return `rgb(${r}, ${g}, ${b})`;
    }
}
CaptchaComponent.decorators = [
    { type: Component, args: [{
                selector: 'captcha',
                template: "<div class=\"captcha-container\" #captchaContainer (click)=\"onClick()\"></div>",
                styles: [".captcha-container{display:inline-block;line-height:0}"]
            }] }
];
/** @nocollapse */
CaptchaComponent.ctorParameters = () => [];
CaptchaComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    generateCode: [{ type: Output }],
    container: [{ type: ViewChild, args: ['captchaContainer',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CaptchaModule {
}
CaptchaModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [CaptchaComponent],
                exports: [CaptchaComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { CaptchaModule, CaptchaComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,