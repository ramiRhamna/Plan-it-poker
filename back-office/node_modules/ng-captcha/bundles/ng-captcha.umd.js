(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-captcha', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng-captcha'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CaptchaComponent = /** @class */ (function () {
        function CaptchaComponent() {
            this.generateCode = new core.EventEmitter();
            this.canvas = document.createElement('canvas');
            this.letters = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
            this.code = '';
        }
        /**
         * @return {?}
         */
        CaptchaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.init();
                this.refresh();
            };
        /**
         * @return {?}
         */
        CaptchaComponent.prototype.onClick = /**
         * @return {?}
         */
            function () {
                this.refresh();
            };
        /**
         * @return {?}
         */
        CaptchaComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                this.canvas.width = this.width || 100;
                this.canvas.height = this.height || 50;
                this.canvas.style.cursor = 'pointer';
                this.canvas.innerHTML = '您的浏览器版本不支持canvas';
                this.container.nativeElement.appendChild(this.canvas);
            };
        // generate code
        // generate code
        /**
         * @return {?}
         */
        CaptchaComponent.prototype.refresh =
            // generate code
            /**
             * @return {?}
             */
            function () {
                this.code = '';
                /** @type {?} */
                var ctx = this.canvas.getContext('2d');
                ctx.textBaseline = 'middle';
                ctx.fillStyle = this.randomColor(180, 240);
                ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                for (var i = 0; i < 4; i++) {
                    /** @type {?} */
                    var letter = this.letters[this.randomNum(0, this.letters.length)];
                    this.code += letter;
                    ctx.font = this.randomNum(this.canvas.height / 2, this.canvas.height) + 'px SimHei';
                    ctx.fillStyle = this.randomColor(50, 160);
                    ctx.shadowOffsetX = this.randomNum(-3, 3);
                    ctx.shadowOffsetY = this.randomNum(-3, 3);
                    ctx.shadowBlur = this.randomNum(-3, 3);
                    ctx.shadowColor = 'rgb(0, 0, 0, 0.3)';
                    /** @type {?} */
                    var x = this.canvas.width / 5 * i;
                    /** @type {?} */
                    var y = this.canvas.height / 2;
                    /** @type {?} */
                    var deg = this.randomNum(-30, 30);
                    // setting rotate and origin point
                    ctx.translate(x, y);
                    ctx.rotate(deg * Math.PI / 180);
                    ctx.fillText(letter, 0, 0);
                    // reset rotate and origin point
                    ctx.rotate(-deg * Math.PI / 180);
                    ctx.translate(-x, -y);
                }
                // draw interfering line
                for (var i = 0; i < 4; i++) {
                    ctx.strokeStyle = this.randomColor(40, 180);
                    ctx.beginPath();
                    ctx.moveTo(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height));
                    ctx.lineTo(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height));
                    ctx.stroke();
                }
                // draw interfering point
                for (var i = 0; i < this.canvas.width / 4; i++) {
                    ctx.fillStyle = this.randomColor();
                    ctx.beginPath();
                    ctx.arc(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height), 1, 0, 2 * Math.PI);
                    ctx.fill();
                }
                this.generateCode.emit(this.code.toLowerCase());
            };
        /**
         * return a random integer
         * @param min 最小值
         * @param max 最大值
         */
        /**
         * return a random integer
         * @param {?} min 最小值
         * @param {?} max 最大值
         * @return {?}
         */
        CaptchaComponent.prototype.randomNum = /**
         * return a random integer
         * @param {?} min 最小值
         * @param {?} max 最大值
         * @return {?}
         */
            function (min, max) {
                return Math.floor(Math.random() * (max - min) + min);
            };
        /**
         * return a random color
         */
        /**
         * return a random color
         * @param {?=} min
         * @param {?=} max
         * @return {?}
         */
        CaptchaComponent.prototype.randomColor = /**
         * return a random color
         * @param {?=} min
         * @param {?=} max
         * @return {?}
         */
            function (min, max) {
                if (min === void 0) {
                    min = 0;
                }
                if (max === void 0) {
                    max = 255;
                }
                /** @type {?} */
                var r = this.randomNum(min, max);
                /** @type {?} */
                var g = this.randomNum(min, max);
                /** @type {?} */
                var b = this.randomNum(min, max);
                return "rgb(" + r + ", " + g + ", " + b + ")";
            };
        CaptchaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'captcha',
                        template: "<div class=\"captcha-container\" #captchaContainer (click)=\"onClick()\"></div>",
                        styles: [".captcha-container{display:inline-block;line-height:0}"]
                    }] }
        ];
        /** @nocollapse */
        CaptchaComponent.ctorParameters = function () { return []; };
        CaptchaComponent.propDecorators = {
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            generateCode: [{ type: core.Output }],
            container: [{ type: core.ViewChild, args: ['captchaContainer',] }]
        };
        return CaptchaComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CaptchaModule = /** @class */ (function () {
        function CaptchaModule() {
        }
        CaptchaModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [CaptchaComponent],
                        exports: [CaptchaComponent]
                    },] }
        ];
        return CaptchaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.CaptchaModule = CaptchaModule;
    exports.ɵa = CaptchaComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,