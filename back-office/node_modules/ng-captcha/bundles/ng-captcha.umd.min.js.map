{"version":3,"sources":["ng://ng-captcha/lib/captcha.component.ts","ng://ng-captcha/lib/captcha.module.ts"],"names":["CaptchaComponent","this","generateCode","EventEmitter","canvas","document","createElement","letters","code","prototype","ngOnInit","init","refresh","onClick","width","height","style","cursor","innerHTML","container","nativeElement","appendChild","ctx","getContext","textBaseline","fillStyle","randomColor","fillRect","i","letter","randomNum","length","font","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","x","y","deg","translate","rotate","Math","PI","fillText","strokeStyle","beginPath","moveTo","lineTo","stroke","arc","fill","emit","toLowerCase","min","max","floor","random","Component","args","selector","template","Input","Output","ViewChild","CaptchaModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, ViewChild, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'captcha',\n  templateUrl: './captcha.component.html',\n  styleUrls: ['./captcha.component.css']\n})\nexport class CaptchaComponent implements OnInit {\n\n  @Input() width\n  @Input() height\n  @Output() generateCode = new EventEmitter()\n  @ViewChild('captchaContainer') container\n  canvas = document.createElement('canvas')\n  letters = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n  code = ''\n\n  constructor() { }\n\n  ngOnInit() {\n    this.init()\n    this.refresh()\n  }\n\n  onClick() {\n    this.refresh()\n  }\n\n  private init() {\n    this.canvas.width = this.width || 100\n    this.canvas.height = this.height || 50\n    this.canvas.style.cursor = 'pointer'\n    this.canvas.innerHTML = 'æ¨çæµè§å¨çæ¬ä¸æ¯æcanvas'\n    this.container.nativeElement.appendChild(this.canvas)\n  }\n\n  // generate code\n  private refresh() {\n    this.code = ''\n    const ctx = this.canvas.getContext('2d')\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = this.randomColor(180, 240)\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\n\n    for (let i = 0; i < 4; i++) {\n      const letter = this.letters[this.randomNum(0, this.letters.length)]\n      this.code += letter\n      ctx.font = this.randomNum(this.canvas.height / 2, this.canvas.height) + 'px SimHei'\n      ctx.fillStyle = this.randomColor(50, 160)\n      ctx.shadowOffsetX = this.randomNum(-3, 3)\n      ctx.shadowOffsetY = this.randomNum(-3, 3)\n      ctx.shadowBlur = this.randomNum(-3, 3)\n      ctx.shadowColor = 'rgb(0, 0, 0, 0.3)'\n      const x = this.canvas.width / 5 * i\n      const y = this.canvas.height / 2\n      const deg = this.randomNum(-30, 30)\n      // setting rotate and origin point\n      ctx.translate(x, y)\n      ctx.rotate(deg * Math.PI / 180)\n      ctx.fillText(letter, 0, 0)\n      // reset rotate and origin point\n      ctx.rotate(-deg * Math.PI / 180)\n      ctx.translate(-x, -y)\n    }\n\n    // draw interfering line\n    for (let i = 0; i < 4; i++) {\n      ctx.strokeStyle = this.randomColor(40, 180)\n      ctx.beginPath()\n      ctx.moveTo(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height))\n      ctx.lineTo(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height))\n      ctx.stroke()\n    }\n\n    // draw interfering point\n    for (let i = 0; i < this.canvas.width / 4; i++) {\n      ctx.fillStyle = this.randomColor()\n      ctx.beginPath()\n      ctx.arc(this.randomNum(0, this.canvas.width), this.randomNum(0, this.canvas.height), 1, 0, 2 * Math.PI)\n      ctx.fill()\n    }\n\n    this.generateCode.emit(this.code.toLowerCase())\n  }\n\n  /**\n   * return a random integer\n   * @param min æå°å¼\n   * @param max æå¤§å¼\n   */\n  private randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min) + min)\n  }\n\n  /**\n   * return a random color\n   */\n  private randomColor(min = 0, max = 255) {\n    const r = this.randomNum(min, max)\n    const g = this.randomNum(min, max)\n    const b = this.randomNum(min, max)\n    return `rgb(${r}, ${g}, ${b})`\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CaptchaComponent } from './captcha.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CaptchaComponent],\n  exports: [CaptchaComponent]\n})\nexport class CaptchaModule { }\n"]}