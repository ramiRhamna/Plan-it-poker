import { Component, Input, Output, EventEmitter, ElementRef, ChangeDetectorRef } from '@angular/core';
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
const moment = momentImported;
export class CalendarSchedulerEventComponent {
    constructor(hostElement, changeDetectorRef) {
        this.hostElement = hostElement;
        this.changeDetectorRef = changeDetectorRef;
        this.showContent = true;
        this.showActions = true;
        this.showStatus = true;
        this.eventClicked = new EventEmitter();
    }
    ngOnInit() {
        this.title = this.title || `${this.event.event.title}, ${this.event.event.content ? `${this.event.event.content},` : null} ${moment(this.event.event.start).format('dddd L, LT')}`;
    }
    ngAfterContentChecked() {
        this.changeDetectorRef.detectChanges();
    }
    onMouseEnter() {
        // Maybe do something
    }
    onMouseLeave() {
        // Maybe do something
    }
    /**
     * @hidden
     */
    onEventClick(mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    }
}
CalendarSchedulerEventComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-event"
                [title]="title"
                [style.max-width.px]="container.clientWidth - 4"
                [class.cal-cancelled]="event.event.isCancelled"
                [class.cal-disabled]="event.event.isDisabled"
                [class.cal-not-clickable]="!event.event.isClickable"
                [class.cal-draggable]="event.event.draggable"
                [class.cal-starts-before-day]="event.startsBeforeDay"
                [class.cal-ends-after-day]="event.endsAfterDay"
                [style.backgroundColor]="event.event.color?.secondary"
                [style.borderColor]="event.event.color?.primary"
                (mwlClick)="onEventClick($event, event.event)"
                (mouseenter)="onMouseEnter()"
                (mouseleave)="onMouseLeave()">
                <calendar-scheduler-event-title
                    view="week"
                    [event]="event.event"
                    [showStatus]="showStatus"
                    [showContent]="showContent"
                    [showActions]="showActions"
                    [customTemplate]="eventTitleTemplate">
                </calendar-scheduler-event-title>
                <calendar-scheduler-event-content
                    *ngIf="showContent"
                    [event]="event.event"
                    [eventContainer]="container">
                </calendar-scheduler-event-content>
                <calendar-scheduler-event-actions
                    *ngIf="showActions && showContent && (event.event.isClickable || event.event.isDisabled)"
                    [event]="event.event">
                </calendar-scheduler-event-actions>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                title: title,
                day: day,
                event: event,
                container: container,
                showContent: showContent,
                showActions: showActions,
                showStatus: showStatus,
                eventTitleTemplate: eventTitleTemplate,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
                host: {
                    '[style.height.%]': '100'
                }
            },] }
];
CalendarSchedulerEventComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
CalendarSchedulerEventComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    event: [{ type: Input }],
    container: [{ type: Input }],
    showContent: [{ type: Input }],
    showActions: [{ type: Input }],
    showStatus: [{ type: Input }],
    customTemplate: [{ type: Input }],
    eventTitleTemplate: [{ type: Input }],
    eventClicked: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,