import { Component, Input, Output, EventEmitter } from '@angular/core';
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
const moment = momentImported;
export class CalendarSchedulerHourSegmentComponent {
    constructor() {
        this.hourSegmentHeight = 58;
        this.showHour = false;
        this.segmentClicked = new EventEmitter();
    }
    ngOnInit() {
        this.title = this.title || moment(this.segment.date).format('dddd L, LT');
    }
    /**
     * @hidden
     */
    onMouseEnter(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    }
    /**
     * @hidden
     */
    onMouseLeave(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    }
    /**
     * @hidden
     */
    onSegmentClick(mouseEvent, segment) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (segment.events.length === 0 && !segment.isDisabled && !segment.isCancelled) {
            this.segmentClicked.emit({ segment: segment });
        }
    }
}
CalendarSchedulerHourSegmentComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-hour-segment',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-hour-segment"
                [title]="title"
                [ngClass]="segment?.cssClass"
                [class.has-events]="segment.events.length > 0"
                [class.cal-cancelled]="segment.isCancelled"
                [class.cal-disabled]="segment.isDisabled"
                [style.backgroundColor]="segment.backgroundColor"
                [style.height.px]="hourSegmentHeight"
                (mwlClick)="onSegmentClick($event, segment)">
                <div class="cal-scheduler-time unselectable" *ngIf="showHour && segment.events.length === 0">
                    {{ segment.date | calendarDate:'dayViewHour':locale }}
                </div>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                title: title,
                day: day,
                segment: segment,
                locale: locale,
                hourSegmentHeight: hourSegmentHeight,
                showHour: showHour,
                segmentClicked: segmentClicked
            }">
        </ng-template>
    `
            },] }
];
CalendarSchedulerHourSegmentComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    segment: [{ type: Input }],
    locale: [{ type: Input }],
    customTemplate: [{ type: Input }],
    hourSegmentHeight: [{ type: Input }],
    showHour: [{ type: Input }],
    segmentClicked: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWhvdXItc2VnbWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvbW9kdWxlcy9zY2hlZHVsZXIvY2FsZW5kYXItc2NoZWR1bGVyLWhvdXItc2VnbWVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBZSxNQUFNLGVBQWUsQ0FBQztBQU81RixzRkFBc0Y7QUFDdEYsT0FBTyxLQUFLLGNBQWMsTUFBTSxRQUFRLENBQUM7QUFDekMsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDO0FBa0M5QixNQUFNLE9BQU8scUNBQXFDO0lBaENsRDtRQTJDYSxzQkFBaUIsR0FBVyxFQUFFLENBQUM7UUFFL0IsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUV6QixtQkFBYyxHQUF3RCxJQUFJLFlBQVksRUFBeUMsQ0FBQztJQW9DOUksQ0FBQztJQWxDRyxRQUFRO1FBQ0osSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxZQUFZLENBQUMsVUFBc0IsRUFBRSxPQUFpQyxFQUFFLEtBQTZCO1FBQ2pHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUMxQyxxQkFBcUI7U0FDeEI7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxZQUFZLENBQUMsVUFBc0IsRUFBRSxPQUFpQyxFQUFFLEtBQTZCO1FBQ2pHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUMxQyxxQkFBcUI7U0FDeEI7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjLENBQUMsVUFBc0IsRUFBRSxPQUFpQztRQUNwRSxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUU7WUFDNUIsVUFBVSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUM1RSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQzs7O1lBbEZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUNBQWlDO2dCQUMzQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E0QlQ7YUFDSjs7O29CQUVJLEtBQUs7a0JBRUwsS0FBSztzQkFFTCxLQUFLO3FCQUVMLEtBQUs7NkJBRUwsS0FBSztnQ0FFTCxLQUFLO3VCQUVMLEtBQUs7NkJBRUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgICBTY2hlZHVsZXJWaWV3RGF5LFxyXG4gICAgU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudFxyXG59IGZyb20gJy4vbW9kZWxzJztcclxuXHJcbi8vIFdPUktBUk9VTkQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9kaGVyZ2VzL25nLXBhY2thZ3IvaXNzdWVzLzIxNyNpc3N1ZWNvbW1lbnQtMzM5NDYwMjU1XHJcbmltcG9ydCAqIGFzIG1vbWVudEltcG9ydGVkIGZyb20gJ21vbWVudCc7XHJcbmNvbnN0IG1vbWVudCA9IG1vbWVudEltcG9ydGVkO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2NhbGVuZGFyLXNjaGVkdWxlci1ob3VyLXNlZ21lbnQnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRUZW1wbGF0ZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhbC1zY2hlZHVsZXItaG91ci1zZWdtZW50XCJcclxuICAgICAgICAgICAgICAgIFt0aXRsZV09XCJ0aXRsZVwiXHJcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJzZWdtZW50Py5jc3NDbGFzc1wiXHJcbiAgICAgICAgICAgICAgICBbY2xhc3MuaGFzLWV2ZW50c109XCJzZWdtZW50LmV2ZW50cy5sZW5ndGggPiAwXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5jYWwtY2FuY2VsbGVkXT1cInNlZ21lbnQuaXNDYW5jZWxsZWRcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmNhbC1kaXNhYmxlZF09XCJzZWdtZW50LmlzRGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgW3N0eWxlLmJhY2tncm91bmRDb2xvcl09XCJzZWdtZW50LmJhY2tncm91bmRDb2xvclwiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUuaGVpZ2h0LnB4XT1cImhvdXJTZWdtZW50SGVpZ2h0XCJcclxuICAgICAgICAgICAgICAgIChtd2xDbGljayk9XCJvblNlZ21lbnRDbGljaygkZXZlbnQsIHNlZ21lbnQpXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FsLXNjaGVkdWxlci10aW1lIHVuc2VsZWN0YWJsZVwiICpuZ0lmPVwic2hvd0hvdXIgJiYgc2VnbWVudC5ldmVudHMubGVuZ3RoID09PSAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge3sgc2VnbWVudC5kYXRlIHwgY2FsZW5kYXJEYXRlOidkYXlWaWV3SG91cic6bG9jYWxlIH19XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgICA8bmctdGVtcGxhdGVcclxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRdPVwiY3VzdG9tVGVtcGxhdGUgfHwgZGVmYXVsdFRlbXBsYXRlXCJcclxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cIntcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgIGRheTogZGF5LFxyXG4gICAgICAgICAgICAgICAgc2VnbWVudDogc2VnbWVudCxcclxuICAgICAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlLFxyXG4gICAgICAgICAgICAgICAgaG91clNlZ21lbnRIZWlnaHQ6IGhvdXJTZWdtZW50SGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgc2hvd0hvdXI6IHNob3dIb3VyLFxyXG4gICAgICAgICAgICAgICAgc2VnbWVudENsaWNrZWQ6IHNlZ21lbnRDbGlja2VkXHJcbiAgICAgICAgICAgIH1cIj5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJTY2hlZHVsZXJIb3VyU2VnbWVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG5cclxuICAgIEBJbnB1dCgpIGRheTogU2NoZWR1bGVyVmlld0RheTtcclxuXHJcbiAgICBASW5wdXQoKSBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQ7XHJcblxyXG4gICAgQElucHV0KCkgbG9jYWxlOiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgY3VzdG9tVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gICAgQElucHV0KCkgaG91clNlZ21lbnRIZWlnaHQ6IG51bWJlciA9IDU4O1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dIb3VyOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgQE91dHB1dCgpIHNlZ21lbnRDbGlja2VkOiBFdmVudEVtaXR0ZXI8eyBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQgfT4gPSBuZXcgRXZlbnRFbWl0dGVyPHsgc2VnbWVudDogU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50IH0+KCk7XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMudGl0bGUgfHwgbW9tZW50KHRoaXMuc2VnbWVudC5kYXRlKS5mb3JtYXQoJ2RkZGQgTCwgTFQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgb25Nb3VzZUVudGVyKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQsIHNlZ21lbnQ6IFNjaGVkdWxlclZpZXdIb3VyU2VnbWVudCwgZXZlbnQ6IENhbGVuZGFyU2NoZWR1bGVyRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWV2ZW50LmlzRGlzYWJsZWQgJiYgIXNlZ21lbnQuaXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAvLyBNYXliZSBkbyBzb21ldGhpbmdcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaGlkZGVuXHJcbiAgICAgKi9cclxuICAgIG9uTW91c2VMZWF2ZShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQsIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFldmVudC5pc0Rpc2FibGVkICYmICFzZWdtZW50LmlzRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgLy8gTWF5YmUgZG8gc29tZXRoaW5nXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBvblNlZ21lbnRDbGljayhtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAobW91c2VFdmVudC5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgbW91c2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzZWdtZW50LmV2ZW50cy5sZW5ndGggPT09IDAgJiYgIXNlZ21lbnQuaXNEaXNhYmxlZCAmJiAhc2VnbWVudC5pc0NhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRDbGlja2VkLmVtaXQoeyBzZWdtZW50OiBzZWdtZW50IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=