import { Component, Input } from '@angular/core';
export class CalendarSchedulerEventActionsComponent {
    constructor() {
        this.actions = [];
    }
    ngOnInit() {
        this.setupActions();
    }
    ngOnChanges(changes) {
        if (changes.event) {
            this.setupActions();
        }
    }
    setupActions() {
        if (this.event.actions) {
            this.actions = this.event.isCancelled
                ? this.event.actions.filter((a) => !a.when || a.when === 'cancelled')
                : this.event.isDisabled
                    ? this.event.actions.filter((a) => !a.when || a.when === 'disabled')
                    : this.event.actions.filter((a) => !a.when || a.when === 'enabled');
        }
    }
    /**
     * @hidden
     */
    onActionClick(mouseEvent, action, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        action.onClick(event);
    }
}
CalendarSchedulerEventActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-actions',
                template: `
        <span *ngIf="event.actions"
            class="cal-scheduler-event-actions">
            <a
                class="cal-scheduler-event-action"
                href="javascript:;"
                *ngFor="let action of actions"
                (mwlClick)="onActionClick($event, action, event)"
                [ngClass]="action.cssClass"
                [innerHtml]="action.label"
                [title]="action.title">
            </a>
        </span>
    `,
                host: {
                    'class': 'cal-scheduler-event-actions-container'
                }
            },] }
];
CalendarSchedulerEventActionsComponent.propDecorators = {
    event: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL21vZHVsZXMvc2NoZWR1bGVyL2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUEwQm5GLE1BQU0sT0FBTyxzQ0FBc0M7SUFwQm5EO1FBd0JXLFlBQU8sR0FBbUMsRUFBRSxDQUFDO0lBZ0N4RCxDQUFDO0lBOUJVLFFBQVE7UUFDWCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUNyQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDZixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRU8sWUFBWTtRQUNoQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXO2dCQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBK0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDO2dCQUNuRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVO29CQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBK0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO29CQUNsRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBK0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUM7U0FDN0c7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhLENBQUMsVUFBc0IsRUFBRSxNQUFvQyxFQUFFLEtBQTZCO1FBQ3JHLElBQUksVUFBVSxDQUFDLGVBQWUsRUFBRTtZQUM1QixVQUFVLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7OztZQXZESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtDQUFrQztnQkFDNUMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7O0tBYVQ7Z0JBQ0QsSUFBSSxFQUFFO29CQUNGLE9BQU8sRUFBRSx1Q0FBdUM7aUJBQ25EO2FBQ0o7OztvQkFHSSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uXHJcbn0gZnJvbSAnLi9tb2RlbHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPHNwYW4gKm5nSWY9XCJldmVudC5hY3Rpb25zXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJjYWwtc2NoZWR1bGVyLWV2ZW50LWFjdGlvbnNcIj5cclxuICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgIGNsYXNzPVwiY2FsLXNjaGVkdWxlci1ldmVudC1hY3Rpb25cIlxyXG4gICAgICAgICAgICAgICAgaHJlZj1cImphdmFzY3JpcHQ6O1wiXHJcbiAgICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgYWN0aW9uIG9mIGFjdGlvbnNcIlxyXG4gICAgICAgICAgICAgICAgKG13bENsaWNrKT1cIm9uQWN0aW9uQ2xpY2soJGV2ZW50LCBhY3Rpb24sIGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJhY3Rpb24uY3NzQ2xhc3NcIlxyXG4gICAgICAgICAgICAgICAgW2lubmVySHRtbF09XCJhY3Rpb24ubGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgW3RpdGxlXT1cImFjdGlvbi50aXRsZVwiPlxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgYCxcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICAnY2xhc3MnOiAnY2FsLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zLWNvbnRhaW5lcidcclxuICAgIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIEBJbnB1dCgpIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50O1xyXG5cclxuICAgIHB1YmxpYyBhY3Rpb25zOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXR1cEFjdGlvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGlmIChjaGFuZ2VzLmV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBBY3Rpb25zKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dXBBY3Rpb25zKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50LmFjdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gdGhpcy5ldmVudC5pc0NhbmNlbGxlZFxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmV2ZW50LmFjdGlvbnMuZmlsdGVyKChhOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uKSA9PiAhYS53aGVuIHx8IGEud2hlbiA9PT0gJ2NhbmNlbGxlZCcpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuZXZlbnQuaXNEaXNhYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5ldmVudC5hY3Rpb25zLmZpbHRlcigoYTogQ2FsZW5kYXJTY2hlZHVsZXJFdmVudEFjdGlvbikgPT4gIWEud2hlbiB8fCBhLndoZW4gPT09ICdkaXNhYmxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmV2ZW50LmFjdGlvbnMuZmlsdGVyKChhOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uKSA9PiAhYS53aGVuIHx8IGEud2hlbiA9PT0gJ2VuYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaGlkZGVuXHJcbiAgICAgKi9cclxuICAgIG9uQWN0aW9uQ2xpY2sobW91c2VFdmVudDogTW91c2VFdmVudCwgYWN0aW9uOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uLCBldmVudDogQ2FsZW5kYXJTY2hlZHVsZXJFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChtb3VzZUV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWN0aW9uLm9uQ2xpY2soZXZlbnQpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==