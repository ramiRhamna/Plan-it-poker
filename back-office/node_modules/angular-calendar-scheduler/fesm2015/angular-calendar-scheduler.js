import { Injectable, EventEmitter, Component, ViewEncapsulation, ChangeDetectorRef, Inject, LOCALE_ID, Input, Output, HostListener, ElementRef, Pipe, InjectionToken, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';
import { DateAdapter, CalendarEventTimesChangedEventType, CalendarEventTitleFormatter, CalendarDateFormatter, CalendarModule } from 'angular-calendar';
import { __rest } from 'tslib';
import { MediaMatcher } from '@angular/cdk/layout';
import { isBefore } from 'date-fns';
import { CalendarDragHelper } from 'angular-calendar/esm2015/modules/common/calendar-drag-helper.provider';
import { CalendarResizeHelper } from 'angular-calendar/esm2015/modules/common/calendar-resize-helper.provider';
import * as momentImported from 'moment';

/**
 * Auth configuration.
 */
class SchedulerConfig {
    constructor(config = {}) {
        this.locale = 'en';
        this.headerDateFormat = 'daysRange';
        this.logEnabled = false;
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.locale = use(config.locale, this.locale);
        this.headerDateFormat = use(config.headerDateFormat, this.headerDateFormat);
        this.logEnabled = use(config.logEnabled, this.logEnabled);
    }
}
SchedulerConfig.decorators = [
    { type: Injectable }
];
SchedulerConfig.ctorParameters = () => [
    { type: SchedulerConfig }
];

// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
const moment = momentImported;
var DAYS_OF_WEEK;
(function (DAYS_OF_WEEK) {
    DAYS_OF_WEEK[DAYS_OF_WEEK["SUNDAY"] = 0] = "SUNDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["MONDAY"] = 1] = "MONDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["TUESDAY"] = 2] = "TUESDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["WEDNESDAY"] = 3] = "WEDNESDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["THURSDAY"] = 4] = "THURSDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["FRIDAY"] = 5] = "FRIDAY";
    DAYS_OF_WEEK[DAYS_OF_WEEK["SATURDAY"] = 6] = "SATURDAY";
})(DAYS_OF_WEEK || (DAYS_OF_WEEK = {}));
const DEFAULT_WEEKEND_DAYS = [
    DAYS_OF_WEEK.SUNDAY,
    DAYS_OF_WEEK.SATURDAY
];
const DAYS_IN_WEEK = 7;
const HOURS_IN_DAY = 24;
const MINUTES_IN_HOUR = 60;
const SECONDS_IN_DAY = 60 * 60 * 24;
const DEFAULT_HOUR_SEGMENT_HEIGHT_PX = 40;
const DEFAULT_EVENT_WIDTH = 1;
const DEFAULT_HOUR_SEGMENTS = 2;
function getSchedulerViewHourGrid(dateAdapter, { viewDate, hourSegments, dayStart, dayEnd }) {
    const { setMinutes, setHours, startOfDay, startOfMinute, endOfDay, addMinutes, addHours, addDays } = dateAdapter;
    const hours = [];
    let startOfView = setMinutes(setHours(startOfDay(viewDate), sanitiseHours(dayStart.hour)), sanitiseMinutes(dayStart.minute));
    let endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), sanitiseHours(dayEnd.hour)), sanitiseMinutes(dayEnd.minute));
    const segmentDuration = MINUTES_IN_HOUR / hourSegments;
    let startOfViewDay = startOfDay(viewDate);
    const endOfViewDay = endOfDay(viewDate);
    let dateAdjustment = (d) => d;
    // this means that we change from or to DST on this day and that's going to cause problems so we bump the date
    if (startOfViewDay.getTimezoneOffset() !== endOfViewDay.getTimezoneOffset()) {
        startOfViewDay = addDays(startOfViewDay, 1);
        startOfView = addDays(startOfView, 1);
        endOfView = addDays(endOfView, 1);
        dateAdjustment = (d) => addDays(d, -1);
    }
    for (let i = 0; i < HOURS_IN_DAY; i++) {
    }
    for (let i = 0; i < HOURS_IN_DAY; i++) {
        const segments = [];
        for (let j = 0; j < hourSegments; j++) {
            const date = addMinutes(addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date: dateAdjustment(date),
                    displayDate: date,
                    isStart: j === 0
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments });
        }
    }
    return hours;
}
function getSchedulerView(dateAdapter, { events = [], viewDate, viewDays, weekStartsOn, startsWithToday, excluded = [], hourSegments = DEFAULT_HOUR_SEGMENTS, dayStart, dayEnd, weekendDays = DEFAULT_WEEKEND_DAYS, hourSegmentHeight = DEFAULT_HOUR_SEGMENT_HEIGHT_PX, eventWidth = DEFAULT_EVENT_WIDTH, logEnabled, }) {
    if (!events) {
        events = [];
    }
    const { addDays, startOfDay, endOfDay, startOfWeek, endOfWeek } = dateAdapter;
    const startOfViewWeek = startsWithToday || viewDays < DAYS_IN_WEEK ? startOfDay(viewDate) : startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    const endOfViewWeek = startsWithToday || viewDays < DAYS_IN_WEEK ? addDays(endOfDay(viewDate), viewDays - 1) : endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    const eventsInWeek = getEventsInPeriod(dateAdapter, {
        events: events,
        periodStart: startOfViewWeek,
        periodEnd: endOfViewWeek
    });
    const days = getSchedulerViewDays(dateAdapter, {
        viewDate: viewDate,
        viewDays: viewDays,
        weekStartsOn: weekStartsOn,
        startsWithToday: startsWithToday,
        excluded: excluded,
        weekendDays: weekendDays
    });
    days.forEach((day) => {
        const startOfView = dateAdapter.setMinutes(dateAdapter.setHours(dateAdapter.startOfDay(day.date), dayStart.hour), dayStart.minute);
        const endOfView = dateAdapter.setMinutes(dateAdapter.setHours(dateAdapter.startOfMinute(dateAdapter.endOfDay(day.date)), dayEnd.hour), dayEnd.minute);
        const previousDayEvents = [];
        const eventsInDay = getEventsInPeriod(dateAdapter, {
            events: eventsInWeek,
            periodStart: startOfView,
            periodEnd: endOfView
        });
        const dayEvents = eventsInDay
            .sort((eventA, eventB) => eventA.start.valueOf() - eventB.start.valueOf())
            .map((ev) => {
            const eventStart = ev.start;
            const eventEnd = ev.end || eventStart;
            const startsBeforeDay = eventStart < startOfView;
            const endsAfterDay = dateAdapter.addMinutes(eventEnd, -1) > endOfView;
            const hourHeightModifier = ((hourSegments * hourSegmentHeight) + 1) / MINUTES_IN_HOUR; // +1 for the 1px segment bottom border
            let top = 0;
            if (eventStart > startOfView) {
                top += dateAdapter.differenceInMinutes(eventStart, startOfView);
            }
            top *= hourHeightModifier;
            const startDate = startsBeforeDay ? startOfView : eventStart;
            const endDate = endsAfterDay ? endOfView : eventEnd;
            let height = dateAdapter.differenceInMinutes(endDate, startDate);
            if (!ev.end) {
                height = hourSegmentHeight;
            }
            else {
                height *= hourHeightModifier;
            }
            const bottom = top + height;
            const overlappingPreviousEvents = getOverLappingEvents(ev, previousDayEvents, top, bottom, logEnabled);
            let left = 0;
            while (overlappingPreviousEvents.some(previousEvent => previousEvent.left === left)) {
                left += eventWidth;
            }
            const event = {
                event: ev,
                top: top,
                height: height,
                width: eventWidth,
                left: left,
                startsBeforeDay: startsBeforeDay,
                endsAfterDay: endsAfterDay
            };
            previousDayEvents.push(event);
            return event;
        });
        function getColumnCount(allEvents, prevOverlappingEvents) {
            const columnCount = Math.max(...prevOverlappingEvents.map((ev) => ev.left + 1));
            const nextOverlappingEvents = allEvents
                .filter((ev) => ev.left >= columnCount)
                .filter((ev) => {
                return (getOverLappingEvents(ev, prevOverlappingEvents, ev.top, ev.top + ev.height, logEnabled).length > 0);
            });
            if (nextOverlappingEvents.length > 0) {
                return getColumnCount(allEvents, nextOverlappingEvents);
            }
            else {
                return columnCount;
            }
        }
        const mappedEvents = dayEvents.map(event => {
            const columnCount = getColumnCount(dayEvents, getOverLappingEvents(event, dayEvents, event.top, event.top + event.height, logEnabled));
            const width = 100 / columnCount;
            return Object.assign(Object.assign({}, event), { left: event.left * width, width });
        });
        day.events = mappedEvents.map(event => {
            const overLappingEvents = getOverLappingEvents(event, mappedEvents.filter(otherEvent => otherEvent.left > event.left), event.top, event.top + event.height, logEnabled);
            if (logEnabled) {
                console.log(`DAY [${moment(day.date).format('dddd L')}] ` +
                    `- EVENT ${event.event.id} [${moment(event.event.start).format('dddd L, LTS')} ` +
                    `- ${moment(event.event.end).format('dddd L, LTS')}] overLappingEvents -> `, overLappingEvents);
            }
            if (overLappingEvents.length > 0) {
                return Object.assign(Object.assign({}, event), { width: Math.min(...overLappingEvents.map(otherEvent => otherEvent.left)) - event.left });
            }
            return event;
        });
        day.hours = getSchedulerViewHourGrid(dateAdapter, {
            viewDate: viewDate,
            hourSegments: hourSegments,
            dayStart: {
                hour: dayStart.hour,
                minute: dayStart.minute
            },
            dayEnd: {
                hour: dayEnd.hour,
                minute: dayEnd.minute
            }
        }).map((hour) => {
            const date = new Date(day.date.getFullYear(), day.date.getMonth(), day.date.getDate(), hour.segments[0].date.getHours());
            const startOfHour = new Date(day.date.getFullYear(), day.date.getMonth(), day.date.getDate(), hour.segments[0].date.getHours());
            const endOfHour = dateAdapter.addSeconds(dateAdapter.addHours(startOfHour, 1), -1);
            const eventsInHour = getSchedulerEventsInPeriod(dateAdapter, {
                events: day.events,
                periodStart: startOfHour,
                periodEnd: endOfHour
            });
            const segments = hour.segments.map((segment) => {
                segment.date = dateAdapter.setDate(dateAdapter.setMonth(dateAdapter.setYear(segment.date, day.date.getFullYear()), day.date.getMonth()), day.date.getDate());
                const startOfSegment = segment.date;
                const endOfSegment = dateAdapter.addSeconds(dateAdapter.addMinutes(startOfSegment, MINUTES_IN_HOUR / hourSegments), -1);
                const eventsInSegment = getSchedulerEventsInPeriod(dateAdapter, {
                    events: eventsInHour,
                    periodStart: startOfSegment,
                    periodEnd: endOfSegment
                });
                if (logEnabled) {
                    console.log(`SEGMENT [${moment(startOfSegment).format('dddd L, LTS')} - ${moment(endOfSegment).format('dddd L, LTS')}] EVENTS -> `, eventsInSegment);
                }
                return {
                    segment: segment,
                    date: new Date(segment.date),
                    events: eventsInSegment
                };
            });
            return {
                hour: hour,
                date: date,
                events: eventsInHour,
                segments: segments
            };
        });
    });
    return {
        days: days,
        period: {
            events: eventsInWeek,
            start: startOfViewWeek,
            end: endOfViewWeek
        }
    };
}
function getSchedulerViewDays(dateAdapter, { viewDate, viewDays, weekStartsOn, startsWithToday, excluded = [], weekendDays = DEFAULT_WEEKEND_DAYS }) {
    const start = startsWithToday || viewDays < DAYS_IN_WEEK
        ? new Date(viewDate)
        : dateAdapter.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    const days = [];
    const loop = (i) => {
        const date = dateAdapter.addDays(start, i);
        if (!excluded.some((e) => date.getDay() === e)) {
            days.push(getSchedulerDay(dateAdapter, { date, weekendDays }));
        }
    };
    for (let i = 0; i < viewDays; i++) {
        loop(i);
    }
    return days;
}
function getSchedulerDay(dateAdapter, args) {
    const date = args.date;
    const today = dateAdapter.startOfDay(new Date());
    return {
        date: date,
        isPast: date < today,
        isToday: dateAdapter.isSameDay(date, today),
        isFuture: date >= dateAdapter.addDays(today, 1),
        isWeekend: args.weekendDays.indexOf(dateAdapter.getDay(date)) > -1,
        inMonth: dateAdapter.isSameMonth(date, today),
        hours: []
    };
}
function getEventsInPeriod(dateAdapter, { events, periodStart, periodEnd }) {
    return events.filter((event) => isEventInPeriod(dateAdapter, { event: event, periodStart: periodStart, periodEnd: periodEnd }));
}
function getSchedulerEventsInPeriod(dateAdapter, { events, periodStart, periodEnd }) {
    return events.filter((event) => isEventInPeriod(dateAdapter, { event: event.event, periodStart: periodStart, periodEnd: periodEnd }));
}
function isEventInPeriod(dateAdapter, { event, periodStart, periodEnd }) {
    const { isSameSecond, addSeconds } = dateAdapter;
    const eventStart = event.start;
    const eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (isSameSecond(eventStart, periodStart) || isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (isSameSecond(addSeconds(eventEnd, -1), periodStart) || isSameSecond(addSeconds(eventEnd, -1), periodEnd)) {
        return true;
    }
    return false;
}
function getOverLappingEvents(event /*SchedulerViewEvent | CalendarSchedulerEvent*/, events, top, bottom, logEnabled = false) {
    return events.filter((previousEvent) => {
        var _a, _b, _c;
        top = Math.round(top);
        bottom = Math.round(bottom);
        const previousEventTop = Math.floor(previousEvent.top);
        const previousEventBottom = Math.floor(previousEvent.top + previousEvent.height);
        if (top < previousEventBottom && previousEventBottom < bottom) {
            if (logEnabled) {
                console.log('[getOverLappingEvents] - EVENT ' + (((_a = event.event) === null || _a === void 0 ? void 0 : _a.id) || event.id) + ' -> top: ' + top + ' - bottom: ' + bottom + ' | PREVIOUS EVENT ' + previousEvent.event.id
                    + ' -> previousEventTop: ' + previousEventTop + ' - previousEventBottom: ' + previousEventBottom + ' -> top < previousEventBottom && previousEventBottom < bottom');
            }
            return true;
        }
        else if (top < previousEventTop && previousEventTop < bottom) {
            if (logEnabled) {
                console.log('[getOverLappingEvents] - EVENT ' + (((_b = event.event) === null || _b === void 0 ? void 0 : _b.id) || event.id) + ' -> top: ' + top + ' - bottom: ' + bottom + ' | PREVIOUS EVENT ' + previousEvent.event.id
                    + ' -> previousEventTop: ' + previousEventTop + ' - previousEventBottom: ' + previousEventBottom + ' -> top < previousEventTop && previousEventTop < bottom');
            }
            return true;
        }
        else if (previousEventTop <= top && bottom <= previousEventBottom) {
            if (logEnabled) {
                console.log('[getOverLappingEvents] - EVENT ' + (((_c = event.event) === null || _c === void 0 ? void 0 : _c.id) || event.id) + ' -> top: ' + top + ' - bottom: ' + bottom + ' | PREVIOUS EVENT ' + previousEvent.event.id
                    + ' -> previousEventTop: ' + previousEventTop + ' - previousEventBottom: ' + previousEventBottom + ' -> previousEventTop <= top && bottom <= previousEventBottom');
            }
            return true;
        }
        return false;
    });
}
function sanitiseHours(hours) {
    return Math.max(Math.min(23, hours), 0);
}
function sanitiseMinutes(minutes) {
    return Math.max(Math.min(59, minutes), 0);
}

function addPeriod(dateAdapter, period, date, amount) {
    return {
        day: dateAdapter.addDays,
        week: dateAdapter.addWeeks,
        month: dateAdapter.addMonths
    }[period](date, amount);
}
function subPeriod(dateAdapter, period, date, amount) {
    return {
        day: dateAdapter.subDays,
        week: dateAdapter.subWeeks,
        month: dateAdapter.subMonths
    }[period](date, amount);
}
function startOfPeriod(dateAdapter, period, date) {
    return {
        day: dateAdapter.startOfDay,
        week: dateAdapter.startOfWeek,
        month: dateAdapter.startOfMonth
    }[period](date);
}
function endOfPeriod(dateAdapter, period, date) {
    return {
        day: dateAdapter.endOfDay,
        week: dateAdapter.endOfWeek,
        month: dateAdapter.endOfMonth
    }[period](date);
}
const trackByDayOrEvent = (index, event) => (event.event.id ? event.event.id : event.event);
const trackByHourColumn = (index, day) => day.hours[0] ? day.hours[0].segments[0].date.toISOString() : day;
const trackByHour = (index, hour) => hour.segments[0].date.toISOString();
const trackByHourSegment = (index, segment) => segment.date.toISOString();
function getMinimumEventHeightInMinutes(hourSegments, hourSegmentHeight) {
    return (MINUTES_IN_HOUR / (hourSegments * hourSegmentHeight)) * hourSegmentHeight;
}
function getDefaultEventEnd(dateAdapter, event, minimumMinutes) {
    return event.end ? event.end : dateAdapter.addMinutes(event.start, minimumMinutes);
}
function roundToNearest(amount, precision) {
    return Math.round(amount / precision) * precision;
}
function getMinutesMoved(movedY, hourSegments, hourSegmentHeight, eventSnapSize) {
    const draggedInPixelsSnapSize = roundToNearest(movedY, eventSnapSize || hourSegmentHeight);
    const pixelAmountInMinutes = MINUTES_IN_HOUR / (hourSegments * hourSegmentHeight);
    return draggedInPixelsSnapSize * pixelAmountInMinutes;
}
function isDraggedWithinPeriod(newStart, newEnd, period) {
    const end = newEnd || newStart;
    return ((period.start <= newStart && newStart <= period.end) ||
        (period.start <= end && end <= period.end));
}
function shouldFireDroppedEvent(dropEvent, date, calendarId) {
    return (dropEvent.dropData &&
        dropEvent.dropData.event &&
        dropEvent.dropData.calendarId !== calendarId);
}

class CalendarSchedulerUtils {
    constructor(dateAdapter) {
        this.dateAdapter = dateAdapter;
    }
    getSchedulerViewHourGrid(args) {
        return getSchedulerViewHourGrid(this.dateAdapter, args);
    }
    getSchedulerViewDays(args) {
        return getSchedulerViewDays(this.dateAdapter, args);
    }
    getSchedulerView(args) {
        return getSchedulerView(this.dateAdapter, args);
    }
}
CalendarSchedulerUtils.decorators = [
    { type: Injectable }
];
CalendarSchedulerUtils.ctorParameters = () => [
    { type: DateAdapter }
];

/**
 *  [ngClass]="getPositioningClasses(event)"
 *
 *  [style.top.px]="event.top"
 *  [style.height.px]="event.height"
 *  [style.left.%]="event.left"
 *  [style.width.%]="event.width"
 *
 *  DRAG & DROP & RESIZE -> https://github.com/mattlewis92/angular-calendar/blob/master/projects/angular-calendar/src/modules/week/calendar-week-view.component.ts
 *  FLEXBOX -> https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 */
class CalendarSchedulerViewComponent {
    /**
     * @hidden
     */
    constructor(cdr, locale, config, utils, dateAdapter, media, changeDetectorRef) {
        this.cdr = cdr;
        this.config = config;
        this.utils = utils;
        this.dateAdapter = dateAdapter;
        this.media = media;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * Number of days shown. This value will be always normalized to DAYS_IN_WEEK (7)
         */
        this._viewDays = DAYS_IN_WEEK;
        /**
         * Specify if the calendar must be resposive on window resize, changing the days showed automatically
         */
        this.responsive = false;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be one of 1, 2, 4, 6
         */
        this.hourSegments = DEFAULT_HOUR_SEGMENTS;
        /**
        * The height in pixels of each hour segment
        */
        this.hourSegmentHeight = DEFAULT_HOUR_SEGMENT_HEIGHT_PX;
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * Specify if the first day of current scheduler view has to be today or the first day of the week
         */
        this.startsWithToday = false;
        /**
         * Specify if content must be shown or not
         */
        this.showEventContent = true;
        /**
         * Specify if actions must be shown or not
         */
        this.showEventActions = true;
        /**
         * Specify if status must be shown or not
         */
        this.showEventStatus = true;
        /**
         * Specify if hour must be shown on segment or not
         */
        this.showSegmentHour = false;
        /**
         * Specify if event must zoom on mouse hover or not
         */
        this.zoomEventOnHover = false;
        /**
         * The grid size to snap resizing and dragging of events to
         */
        this.eventSnapSize = this.hourSegmentHeight;
        /**
        * Whether to snap events to a grid when dragging
        */
        this.snapDraggedEvents = true;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when view days value changes
         */
        this.viewDaysChanged = new EventEmitter();
        /**
         * Called when a header week day is clicked
         */
        this.dayHeaderClicked = new EventEmitter();
        /**
         * Called when the hour is clicked
         */
        this.hourClicked = new EventEmitter();
        /**
         * Called when the segment is clicked
         */
        this.segmentClicked = new EventEmitter();
        /**
         * Called when the event is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        // resizes: Map<CalendarSchedulerEvent, SchedulerResizeEvent> = new Map();
        this.resizes = new Map();
        /**
         * @hidden
         */
        this.eventDragEnter = 0;
        /**
         * @hidden
         */
        this.dragActive = false;
        /**
         * @hidden
         */
        this.dragAlreadyMoved = false;
        /**
         * @hidden
         */
        this.calendarId = Symbol('angular calendar scheduler view id');
        /**
         * @hidden
         */
        this.trackByHourColumn = trackByHourColumn;
        /**
         * @hidden
         */
        this.trackByDayOrEvent = trackByDayOrEvent;
        /**
         * @hidden
         */
        this.trackByHour = trackByHour;
        /**
         * @hidden
         */
        this.trackByHourSegment = trackByHourSegment;
        this.locale = this.config.locale || locale;
        // See 'Responsive breakpoints' at https://getbootstrap.com/docs/4.1/layout/overview/
        this.mobileQueryXs = this.media.matchMedia('(max-width: 576px)'); // Extra small devices (portrait phones, less than 576px)
        this.mobileQuerySm = this.media.matchMedia('(max-width: 768px)'); // Small devices (landscape phones, less than 768px)
        this.mobileQueryListener = () => this.changeDetectorRef.detectChanges();
        // this.mobileQueryXs.addEventListener('change', this.mobileQueryListener);
        this.mobileQueryXs.addListener(this.mobileQueryListener);
        // this.mobileQuerySm.addEventListener('change', this.mobileQueryListener);
        this.mobileQuerySm.addListener(this.mobileQueryListener);
    }
    get viewDays() {
        return this._viewDays;
    }
    set viewDays(value) {
        this._viewDays = Math.min(value, DAYS_IN_WEEK);
    }
    onResize(event) {
        this.adjustViewDays();
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.adjustViewDays();
        if (this.refresh) {
            this.refreshSubscription = this.refresh
                // tslint:disable-next-line: deprecation
                .subscribe({
                next: () => {
                    this.refreshAll();
                    this.cdr.markForCheck();
                },
                error: () => { },
                complete: () => { }
            });
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.viewDays || changes.viewDate || changes.excludeDays || changes.weekendDays) {
            this.refreshHeader();
        }
        if (changes.viewDays ||
            changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayEndHour ||
            changes.dayStartMinute ||
            changes.dayEndMinute ||
            changes.excludeDays ||
            changes.eventWidth) {
            this.refreshHourGrid();
            this.refreshBody();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        // this.mobileQueryXs.removeEventListener('change', this.mobileQueryListener);
        this.mobileQueryXs.removeListener(this.mobileQueryListener);
        // this.mobileQuerySm.removeEventListener('change', this.mobileQueryListener);
        this.mobileQuerySm.removeListener(this.mobileQueryListener);
    }
    setViewDays(viewDays) {
        const oldViewDays = this._viewDays;
        this.viewDays = viewDays;
        if (this._viewDays !== oldViewDays) {
            this.viewDaysChanged.emit(this._viewDays);
            this.refreshAll();
        }
    }
    adjustViewDays() {
        const oldViewDays = this._viewDays;
        if (this.responsive) {
            // https://www.digitalocean.com/community/tutorials/angular-breakpoints-angular-cdk
            // With a Component: https://www.digitalocean.com/community/tutorials/detect-responsive-screen-sizes-in-angular
            // check/set the size
            if (this.mobileQueryXs.matches) {
                this.viewDays = 1;
            }
            else if (this.mobileQuerySm.matches) {
                this.viewDays = 3;
            }
            else {
                this.viewDays = DAYS_IN_WEEK;
            }
        }
        if (this._viewDays !== oldViewDays) {
            this.viewDaysChanged.emit(this._viewDays);
            this.refreshAll();
        }
    }
    getPositioningClasses(day, event) {
        const classes = [
            this.getDayClass(event.start),
            this.getTimeClass(day.date, event),
            this.getLengthClass(day.date, event)
        ];
        return classes.join(' ');
    }
    getDayClass(date) {
        return '';
    }
    getTimeClass(date, event) {
        if (this.dateAdapter.isSameDay(date, event.start)) {
            let hours = event.start.getHours();
            if (this.dayStartHour > 0) {
                hours = event.start.getHours() - this.dayStartHour;
            }
            const hoursString = hours < 10 ? `0${hours}` : `${hours}`;
            const minutesString = event.start.getMinutes() < 10 ? `0${event.start.getMinutes()}` : `${event.start.getMinutes()}`;
            return `time${hoursString}${minutesString}`;
        }
        else if (isBefore(event.start, this.dateAdapter.startOfDay(date))) {
            return `time0000`;
        }
    }
    getLengthClass(date, event) {
        if (this.dateAdapter.isSameDay(date, event.start)) {
            const durationInMinutes = this.dateAdapter.differenceInMinutes(event.end, event.start);
            const leftToEndOfDay = this.dateAdapter.differenceInMinutes(this.dateAdapter.setMinutes(this.dateAdapter.setHours(event.start, this.dayEndHour + 1), 0), event.start);
            return leftToEndOfDay > durationInMinutes ? `length${durationInMinutes}` : `length${leftToEndOfDay}`;
        }
        else if (isBefore(event.start, this.dateAdapter.startOfDay(date))) {
            let leftDurationInMinutes = 0;
            if (this.dateAdapter.isSameDay(date, event.end)) {
                leftDurationInMinutes = this.dateAdapter.differenceInMinutes(event.end, this.dateAdapter.startOfDay(date));
                if (this.dayStartHour > 0) {
                    leftDurationInMinutes = (event.end.getHours() - this.dayStartHour) * MINUTES_IN_HOUR;
                }
            }
            else {
                leftDurationInMinutes = ((this.dayEndHour + 1) - this.dayStartHour) * MINUTES_IN_HOUR;
            }
            return `length${leftDurationInMinutes}`;
        }
    }
    refreshHourGrid() {
        this.hours = this.utils.getSchedulerViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            }
        });
    }
    refreshHeader() {
        this.days = this.utils.getSchedulerViewDays({
            viewDate: this.viewDate,
            viewDays: this.viewDays,
            weekStartsOn: this.weekStartsOn,
            startsWithToday: this.startsWithToday,
            excluded: this.excludeDays,
            weekendDays: this.weekendDays
        });
    }
    refreshBody(events) {
        this.view = this.getSchedulerView(events || this.events);
        if (this.dayModifier) {
            this.days.forEach(day => this.dayModifier(day));
        }
        if (this.dayModifier || this.hourModifier || this.segmentModifier) {
            this.view.days.forEach(day => {
                if (this.dayModifier) {
                    this.dayModifier(day);
                }
                day.hours.forEach((hour) => {
                    if (this.hourModifier) {
                        this.hourModifier(hour);
                    }
                    hour.segments.forEach((segment) => {
                        if (this.segmentModifier) {
                            this.segmentModifier(segment);
                        }
                    });
                });
            });
        }
        if (this.eventModifier) {
            this.events.forEach(event => this.eventModifier(event));
        }
    }
    refreshAll() {
        this.refreshHeader();
        this.refreshHourGrid();
        this.refreshBody();
    }
    getSchedulerView(events) {
        return this.utils.getSchedulerView({
            events: events,
            viewDate: this.viewDate,
            viewDays: this.viewDays,
            hourSegments: this.hourSegments,
            weekStartsOn: this.weekStartsOn,
            startsWithToday: this.startsWithToday,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            },
            excluded: this.excludeDays,
            eventWidth: 1,
            hourSegmentHeight: this.hourSegmentHeight,
            logEnabled: this.config.logEnabled
        });
    }
    //#region RESIZE
    /**
     * @hidden
     */
    resizeStarted(eventsContainer, event, resizeEvent) {
        this.resizes.set(event.event, resizeEvent);
        this.dayColumnWidth = Math.floor(eventsContainer.offsetWidth / this.days.length);
        const resizeHelper = new CalendarResizeHelper(eventsContainer);
        this.validateResize = ({ rectangle }) => resizeHelper.validateResize({ rectangle });
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    resizing(event, resizeEvent) {
        this.resizes.set(event.event, resizeEvent);
        const adjustedEvents = new Map();
        const tempEvents = [...this.events];
        this.resizes.forEach((lastResizeEvent, ev) => {
            const newEventDates = this.getResizedEventDates(ev, lastResizeEvent);
            const adjustedEvent = Object.assign(Object.assign({}, ev), newEventDates);
            adjustedEvents.set(adjustedEvent, ev);
            const eventIndex = tempEvents.indexOf(ev);
            tempEvents[eventIndex] = adjustedEvent;
        });
        this.restoreOriginalEvents(tempEvents, adjustedEvents);
    }
    /**
     * @hidden
     */
    resizeEnded(event) {
        this.view = this.getSchedulerView(this.events);
        const lastResizeEvent = this.resizes.get(event.event);
        this.resizes.delete(event.event);
        const newEventDates = this.getResizedEventDates(event.event, lastResizeEvent);
        this.eventTimesChanged.emit({
            newStart: newEventDates.start,
            newEnd: newEventDates.end,
            event: event.event,
            type: CalendarEventTimesChangedEventType.Resize
        });
    }
    getResizedEventDates(event, resizeEvent) {
        const minimumEventHeight = getMinimumEventHeightInMinutes(this.hourSegments, this.hourSegmentHeight);
        const newEventDates = {
            start: event.start,
            end: getDefaultEventEnd(this.dateAdapter, event, minimumEventHeight)
        };
        const { end } = event, eventWithoutEnd = __rest(event, ["end"]);
        const smallestResizes = {
            start: this.dateAdapter.addMinutes(newEventDates.end, minimumEventHeight * -1),
            end: getDefaultEventEnd(this.dateAdapter, eventWithoutEnd, minimumEventHeight)
        };
        if (resizeEvent.edges.left) {
            const daysDiff = Math.round(+resizeEvent.edges.left / this.dayColumnWidth);
            const newStart = this.dateAdapter.addDays(newEventDates.start, daysDiff);
            if (newStart < smallestResizes.start) {
                newEventDates.start = newStart;
            }
            else {
                newEventDates.start = smallestResizes.start;
            }
        }
        else if (resizeEvent.edges.right) {
            const daysDiff = Math.round(+resizeEvent.edges.right / this.dayColumnWidth);
            const newEnd = this.dateAdapter.addDays(newEventDates.end, daysDiff);
            if (newEnd > smallestResizes.end) {
                newEventDates.end = newEnd;
            }
            else {
                newEventDates.end = smallestResizes.end;
            }
        }
        if (resizeEvent.edges.top) {
            const precision = this.eventSnapSize || this.hourSegmentHeight;
            const draggedInPixelsSnapSize = Math.round(resizeEvent.edges.top / precision) * precision;
            const pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);
            const minutesMoved = draggedInPixelsSnapSize * pixelAmountInMinutes;
            const newStart = this.dateAdapter.addMinutes(newEventDates.start, minutesMoved);
            if (newStart < smallestResizes.start) {
                newEventDates.start = newStart;
            }
            else {
                newEventDates.start = smallestResizes.start;
            }
        }
        else if (resizeEvent.edges.bottom) {
            const precision = this.eventSnapSize || this.hourSegmentHeight;
            const draggedInPixelsSnapSize = Math.round(resizeEvent.edges.bottom / precision) * precision;
            const pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);
            const minutesMoved = draggedInPixelsSnapSize * pixelAmountInMinutes;
            const newEnd = this.dateAdapter.addMinutes(newEventDates.end, minutesMoved);
            if (newEnd > smallestResizes.end) {
                newEventDates.end = newEnd;
            }
            else {
                newEventDates.end = smallestResizes.end;
            }
        }
        return newEventDates;
    }
    //#endregion
    //#region DRAG & DROP
    /**
     * @hidden
     */
    eventDropped(dropEvent, date) {
        if (shouldFireDroppedEvent(dropEvent, date, this.calendarId)) {
            this.eventTimesChanged.emit({
                type: CalendarEventTimesChangedEventType.Drop,
                event: dropEvent.dropData.event,
                newStart: date,
                newEnd: null
            });
        }
    }
    /**
     * @hidden
     */
    dragStarted(eventsContainer, eventContainer, event) {
        this.dayColumnWidth = Math.floor(eventsContainer.offsetWidth / this.days.length);
        const dragHelper = new CalendarDragHelper(eventsContainer, eventContainer);
        this.validateDrag = ({ x, y, transform }) => this.resizes.size === 0 && dragHelper.validateDrag({
            x,
            y,
            snapDraggedEvents: this.snapDraggedEvents,
            dragAlreadyMoved: this.dragAlreadyMoved,
            transform
        });
        this.dragActive = true;
        this.dragAlreadyMoved = false;
        this.eventDragEnter = 0;
        if (!this.snapDraggedEvents && event) {
            this.view.days.forEach((day) => {
                const linkedEvent = day.events.find(ev => ev.event === event.event && ev !== event);
                // hide any linked events while dragging
                if (linkedEvent) {
                    linkedEvent.width = 0;
                    linkedEvent.height = 0;
                }
            });
        }
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    dragMove(event, dragEvent) {
        if (this.snapDraggedEvents) {
            const newEventTimes = this.getDragMovedEventTimes(event, dragEvent, this.dayColumnWidth, true);
            const originalEvent = event.event;
            const adjustedEvent = Object.assign(Object.assign({}, originalEvent), newEventTimes);
            const tempEvents = this.events.map(ev => {
                if (ev === originalEvent) {
                    return adjustedEvent;
                }
                return ev;
            });
            this.restoreOriginalEvents(tempEvents, new Map([[adjustedEvent, originalEvent]]));
        }
        this.dragAlreadyMoved = true;
    }
    dragEnded(event, dragEndEvent, dayWidth, useY = false) {
        this.view = this.getSchedulerView(this.events);
        this.dragActive = false;
        const { start, end } = this.getDragMovedEventTimes(event, dragEndEvent, dayWidth, useY);
        if (this.eventDragEnter > 0 &&
            isDraggedWithinPeriod(start, end, this.view.period)) {
            this.eventTimesChanged.emit({
                newStart: start,
                newEnd: end,
                event: event.event,
                type: CalendarEventTimesChangedEventType.Drag
            });
        }
    }
    getDragMovedEventTimes(event, dragEndEvent, dayWidth, useY) {
        const daysDragged = roundToNearest(dragEndEvent.x, dayWidth) / dayWidth;
        const minutesMoved = useY ?
            getMinutesMoved(dragEndEvent.y, this.hourSegments, this.hourSegmentHeight, this.eventSnapSize)
            : 0;
        const start = this.dateAdapter.addMinutes(this.dateAdapter.addDays(event.event.start, daysDragged), minutesMoved);
        let end;
        if (event.event.end) {
            end = this.dateAdapter.addMinutes(this.dateAdapter.addDays(event.event.end, daysDragged), minutesMoved);
        }
        return { start, end };
    }
    restoreOriginalEvents(tempEvents, adjustedEvents) {
        this.refreshBody(tempEvents);
        const adjustedEventsArray = tempEvents.filter(event => adjustedEvents.has(event));
        this.view.days.forEach(day => {
            adjustedEventsArray.forEach(adjustedEvent => {
                const originalEvent = adjustedEvents.get(adjustedEvent);
                const existingColumnEvent = day.events.find(ev => ev.event === adjustedEvent);
                if (existingColumnEvent) {
                    // restore the original event so trackBy kicks in and the dom isn't changed
                    existingColumnEvent.event = originalEvent;
                }
                else {
                    // add a dummy event to the drop so if the event was removed from the original column the drag doesn't end early
                    day.events.push({
                        event: originalEvent,
                        left: 0,
                        top: 0,
                        height: 0,
                        width: 0,
                        startsBeforeDay: false,
                        endsAfterDay: false
                    });
                }
            });
        });
        adjustedEvents.clear();
    }
}
CalendarSchedulerViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-view',
                template: `
        <div class="cal-scheduler-view">
            <calendar-scheduler-header
                [days]="days"
                [locale]="locale"
                [customTemplate]="headerTemplate"
                (dayHeaderClicked)="dayHeaderClicked.emit($event)">
            </calendar-scheduler-header>

            <div class="cal-scheduler" #calendarContainer>
                <div class="cal-scheduler-hour-rows aside">
                    <div class="cal-scheduler-hour align-center horizontal" *ngFor="let hour of hours; trackBy:trackByHour">
                      <div class="cal-scheduler-time">
                        <div class="cal-scheduler-time-segment" *ngFor="let segment of hour.segments"
                            [style.height.px]="hourSegmentHeight">
                            {{ segment.date | calendarDate:'dayViewHour':locale }}
                        </div>
                      </div>
                    </div>
                </div>

                <div class="cal-scheduler-cols aside" #dayColumns
                    [class.cal-resize-active]="resizes.size > 0"
                    mwlDroppable
                    (dragEnter)="eventDragEnter = eventDragEnter + 1"
                    (dragLeave)="eventDragEnter = eventDragEnter - 1">
                    <div class="cal-scheduler-col"
                        *ngFor="let day of view.days; trackBy:trackByHourColumn"
                        [ngClass]="day?.cssClass"
                        [style.backgroundColor]="day.backgroundColor">
                        <div #eventContainer
                            class="cal-scheduler-event-container"
                            *ngFor="let event of day.events; trackBy:trackByDayOrEvent"
                            [ngClass]="event.event?.cssClass"
                            [hidden]="event.height === 0 && event.width === 0"
                            [style.top.px]="event.top"
                            [style.height.px]="event.height"
                            [style.left.%]="event.left"
                            [style.width.%]="event.width"
                            [class.zoom-on-hover]="zoomEventOnHover"

                            mwlResizable
                            [resizeSnapGrid]="{left: dayColumnWidth, right: dayColumnWidth, top: eventSnapSize || hourSegmentHeight, bottom: eventSnapSize || hourSegmentHeight}"
                            [validateResize]="validateResize"
                            [allowNegativeResizes]="true"
                            (resizeStart)="resizeStarted(dayColumns, event, $event)"
                            (resizing)="resizing(event, $event)"
                            (resizeEnd)="resizeEnded(event)"

                            mwlDraggable
                            dragActiveClass="cal-drag-active"
                            [dropData]="{event: event.event, calendarId: calendarId}"
                            [dragAxis]="{
                                x: event.event.draggable && resizes.size === 0,
                                y: event.event.draggable && resizes.size === 0
                            }"
                            [dragSnapGrid]="snapDraggedEvents ? {x: dayColumnWidth, y: eventSnapSize || hourSegmentHeight} : {}"
                            [ghostDragEnabled]="!snapDraggedEvents"
                            [validateDrag]="validateDrag"
                            (dragPointerDown)="dragStarted(dayColumns, eventContainer, event)"
                            (dragging)="dragMove(event, $event)"
                            (dragEnd)="dragEnded(event, $event, dayColumnWidth, true)">

                            <div *ngIf="event.event?.resizable?.beforeStart && !event.startsBeforeDay"
                                class="cal-resize-handle cal-resize-handle-before-start"
                                mwlResizeHandle
                                [resizeEdges]="{
                                    left: true,
                                    top: true
                                }">
                            </div>
                            <calendar-scheduler-event
                                [day]="day"
                                [event]="event"
                                [container]="eventContainer"
                                [showContent]="showEventContent && event.height >= 75"
                                [showActions]="showEventActions"
                                [showStatus]="showEventStatus"
                                [customTemplate]="eventTemplate"
                                [eventTitleTemplate]="eventTitleTemplate"
                                (eventClicked)="eventClicked.emit($event)">
                            </calendar-scheduler-event>
                            <div *ngIf="event.event?.resizable?.afterEnd && !event.endsAfterDay"
                                class="cal-resize-handle cal-resize-handle-after-end"
                                mwlResizeHandle
                                [resizeEdges]="{
                                    right: true,
                                    bottom: true
                                }">
                            </div>
                        </div>

                        <div class="cal-scheduler-hour"
                            *ngFor="let hour of day.hours; let i = index; trackBy:trackByHour"
                            [class.cal-even]="i % 2 === 0"
                            [class.cal-odd]="i % 2 === 1"
                            [ngClass]="hour.cssClass"
                            [style.backgroundColor]="hour.backgroundColor"
                            (mwlClick)="hourClicked.emit({hour: hour})"
                            [class.cal-past]="day.isPast"
                            [class.cal-today]="day.isToday"
                            [class.cal-future]="day.isFuture"
                            [class.cal-weekend]="day.isWeekend"
                            [class.cal-in-month]="day.inMonth"
                            [class.cal-out-month]="!day.inMonth">
                            <div class="cal-scheduler-hour-segments">
                                <calendar-scheduler-hour-segment
                                    *ngFor="let segment of hour.segments; trackBy:trackByHourSegment"
                                    [day]="day"
                                    [segment]="segment"
                                    [locale]="locale"
                                    [customTemplate]="cellTemplate"
                                    [hourSegmentHeight]="hourSegmentHeight"
                                    [showHour]="showSegmentHour"
                                    (segmentClicked)="segmentClicked.emit($event)"
                                    mwlDroppable
                                    [dragOverClass]="!dragActive || !snapDraggedEvents ? 'cal-drag-over' : 'null'"
                                    dragActiveClass="cal-drag-active"
                                    (drop)="eventDropped($event, segment.date)">
                                </calendar-scheduler-hour-segment>
                             </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                styles: [".cal-scheduler-view *{-webkit-box-sizing:border-box;box-sizing:border-box}.cal-scheduler-view .unselectable{-moz-user-select:none;-ms-user-select:none;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.cal-scheduler-view .cal-scheduler-headers{-ms-flex-flow:row wrap;-webkit-box-direction:normal;-webkit-box-orient:horizontal;border:1px solid #e1e1e1;display:-webkit-box;display:-ms-flexbox;display:flex;flex-flow:row wrap;margin-bottom:3px}.cal-scheduler-view .cal-scheduler-headers .aside{-ms-flex:1 0;-webkit-box-flex:1;flex:1 0}.cal-scheduler-view .cal-scheduler-headers .aside.cal-header-clock{max-width:5em}.cal-scheduler-view .cal-scheduler-headers .cal-header{-ms-flex:1;-webkit-box-flex:1;cursor:default;flex:1;overflow:hidden;padding:5px;text-align:center;text-overflow:ellipsis;white-space:nowrap}.cal-scheduler-view .cal-scheduler-headers .cal-header:not(:last-child){border-right:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler-headers .cal-header:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-weekend span{color:#8b0000}.cal-scheduler-view .cal-scheduler-headers .cal-header span{font-weight:400;opacity:.5}.cal-scheduler-view .cal-scheduler,.cal-scheduler-view .cal-scheduler-headers .cal-header-cols{-ms-flex-flow:row wrap;-webkit-box-direction:normal;-webkit-box-orient:horizontal;display:-webkit-box;display:-ms-flexbox;display:flex;flex-flow:row wrap}.cal-scheduler-view .cal-scheduler .aside{-ms-flex:1 0;-webkit-box-flex:1;flex:1 0}.cal-scheduler-view .cal-scheduler .aside.cal-scheduler-hour-rows{max-width:5em}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows{border:1px solid #e1e1e1;overflow:hidden;position:relative;width:auto!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour{display:-webkit-box;display:-ms-flexbox;display:flex}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:nth-child(odd){background-color:#fafafa}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:not(:last-child){border-bottom:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time{-ms-flex-flow:column wrap;-webkit-box-direction:normal;-webkit-box-orient:vertical;display:-webkit-box;display:-ms-flexbox;display:flex;flex-flow:column wrap;font-weight:700;text-align:center;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-time-segment{cursor:default}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-time-segment:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-time-segment:not(:last-child){border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols{-ms-flex-flow:row wrap;-webkit-box-direction:normal;-webkit-box-orient:horizontal;border-top:1px solid #e1e1e1;display:-webkit-box;display:-ms-flexbox;display:flex;flex-flow:row wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols:not(.cal-resize-active) .cal-scheduler-hour-segment:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col{border-right:1px solid #e1e1e1;position:relative}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour{-ms-flex:1 0;-ms-flex-flow:column wrap;-webkit-box-direction:normal;-webkit-box-flex:1;-webkit-box-orient:vertical;display:-webkit-box;display:-ms-flexbox;display:flex;flex:1 0;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour.cal-odd{background:#fff}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour.cal-even{background:#fafafa}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments{-ms-flex:1 0;-ms-flex-flow:column wrap;-webkit-box-direction:normal;-webkit-box-flex:1;-webkit-box-orient:vertical;border-bottom:1px solid #e1e1e1;display:-webkit-box;display:-ms-flexbox;display:flex;flex:1 0;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments.cal-disabled .cal-scheduler-event{-webkit-filter:opacity(50%);filter:opacity(50%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments :not(:last-child) .cal-scheduler-hour-segment{border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments .cal-scheduler-hour-segment{-ms-flex:1 0;-ms-flex-flow:column wrap;-webkit-box-direction:normal;-webkit-box-flex:1;-webkit-box-orient:vertical;display:-webkit-box;display:-ms-flexbox;display:flex;flex:1 0;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments .cal-scheduler-hour-segment.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments .cal-scheduler-hour-segment.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments .cal-scheduler-hour-segment.cal-drag-over{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-hour .cal-scheduler-hour-segments .cal-scheduler-hour-segment .cal-scheduler-time{color:#6c757d;cursor:default;font-size:.7em;font-weight:700}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container{-ms-flex:1 0;-ms-flex-flow:column wrap;-webkit-box-direction:normal;-webkit-box-flex:1;-webkit-box-orient:vertical;display:-webkit-box;display:-ms-flexbox;flex:1 0;flex-flow:column wrap;position:absolute}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.zoom-on-hover{-webkit-transition:all .2s ease-out;transition:all .2s ease-out}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.zoom-on-hover:hover{-webkit-transform:scale(1.05);transform:scale(1.05);z-index:9999999}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event{-ms-flex:1 0;-ms-flex-flow:column wrap;-webkit-backface-visibility:hidden;-webkit-box-direction:normal;-webkit-box-flex:1;-webkit-box-orient:vertical;-webkit-filter:brightness(100%);-webkit-transition:all .2s ease-out;backface-visibility:hidden;background-color:#d1e8ff;border:1px solid #1e90ff;border-radius:.3em;display:-webkit-box;display:-ms-flexbox;display:flex;filter:brightness(100%);flex:1 0;flex-flow:column wrap;font-size:12px;height:calc(100% - 5px);margin:2px;overflow:hidden;padding:5px 10px;text-overflow:ellipsis;transition:all .2s ease-out;white-space:nowrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event.cal-cancelled,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event.cal-disabled{-webkit-filter:grayscale(100%);background-color:grey!important;filter:grayscale(100%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event.cal-not-clickable{cursor:not-allowed!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled):not(.cal-cancelled):hover{-webkit-filter:brightness(95%);cursor:pointer;filter:brightness(95%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled):not(.cal-cancelled).cal-draggable{cursor:move}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event.cal-starts-before-day{border-top-left-radius:0;border-top-right-radius:0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event.cal-ends-after-day{border-bottom-left-radius:0;border-bottom-right-radius:0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container{-ms-flex-align:center;-ms-flex-flow:row wrap;-webkit-box-align:center;-webkit-box-direction:normal;-webkit-box-orient:horizontal;align-items:center;display:-webkit-box;display:-ms-flexbox;display:flex;flex-flow:row wrap;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-title{-moz-user-select:none;-ms-flex:1 0;-ms-user-select:none;-webkit-box-flex:1;-webkit-user-select:none;flex:1 0;font-size:16px;font-weight:700;overflow:hidden;text-overflow:ellipsis;user-select:none;white-space:nowrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status{background:grey;border:1px solid #000;border-radius:50px;height:16px;width:16px}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.ok{background:green}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.warning{background:orange}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.danger{background:red}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-content-container{-ms-flex:1 auto;-webkit-box-flex:1;flex:1 auto;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-content-container .cal-scheduler-event-content{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;overflow:hidden;text-overflow:ellipsis;user-select:none;white-space:normal}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container{position:relative;text-align:end;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container.no-content-actions{-ms-flex:1 0;-webkit-box-flex:1;flex:1 0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container:not(.no-content-actions) .cal-scheduler-event-actions{height:auto;width:auto}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container .cal-scheduler-event-actions .cal-scheduler-event-action{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;text-decoration:none;user-select:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-resize-handle{cursor:row-resize;height:4px;position:absolute;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container .cal-resize-handle.cal-resize-handle-after-end{bottom:0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.cal-drag-active{pointer-events:none;z-index:999}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.cal-drag-active *{pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.day1{left:5%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.day2{left:10%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.day3{left:15%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.day4{left:20%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.day5{left:25%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.day6{left:30%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.day7{left:35%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0000{top:0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0015{top:1.47%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0030{top:2.94%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0045{top:4.41%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0100{top:5.88%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0115{top:7.35%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0130{top:8.82%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0145{top:10.29%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0200{top:11.76%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0215{top:13.23%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0230{top:14.7%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0245{top:16.17%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0300{top:17.64%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0315{top:19.11%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0330{top:20.58%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0345{top:22.05%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0400{top:23.52%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0415{top:24.99%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0430{top:26.46%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0445{top:27.93%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0500{top:29.4%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0515{top:30.87%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0530{top:32.34%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0545{top:33.81%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0600{top:35.28%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0615{top:36.75%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0630{top:38.22%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0645{top:39.69%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0700{top:41.16%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0715{top:42.63%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0730{top:44.1%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0745{top:45.57%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0800{top:47.04%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0815{top:48.51%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0830{top:49.98%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0845{top:51.45%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0900{top:52.92%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0915{top:54.39%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0930{top:55.86%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time0945{top:57.33%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1000{top:58.8%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1015{top:60.27%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1030{top:61.74%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1045{top:63.21%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1100{top:64.68%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1115{top:66.15%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1130{top:67.62%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1145{top:69.09%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1200{top:70.56%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1215{top:72.03%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1230{top:73.5%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1245{top:74.97%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1300{top:76.44%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1315{top:77.91%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1330{top:79.38%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1345{top:80.85%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1400{top:82.32%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1415{top:83.79%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1430{top:85.26%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1445{top:86.73%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1500{top:88.2%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1515{top:89.67%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1530{top:91.14%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1545{top:92.61%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1600{top:94.08%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1615{top:95.55%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1630{top:97.02%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1645{top:98.49%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1700{top:99.96%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1715{top:101.43%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1730{top:102.9%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1745{top:104.37%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1800{top:105.84%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1815{top:107.31%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1830{top:108.78%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1845{top:110.25%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1900{top:111.72%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1915{top:113.19%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1930{top:114.66%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time1945{top:116.13%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2000{top:117.6%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2015{top:119.07%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2030{top:120.54%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2045{top:122.01%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2100{top:123.48%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2115{top:124.95%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2130{top:126.42%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2145{top:127.89%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2200{top:129.36%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2215{top:130.83%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2230{top:132.3%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2245{top:133.77%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2300{top:135.24%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2315{top:136.71%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2330{top:138.18%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2345{top:139.65%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.time2400{top:141.12%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length0{height:0%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length15{height:1.47%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length30{height:2.94%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length45{height:4.41%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length60{height:5.88%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length75{height:7.35%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length90{height:8.82%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length105{height:10.29%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length120{height:11.76%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length135{height:13.23%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length150{height:14.7%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length165{height:16.17%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length180{height:17.64%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length195{height:19.11%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length210{height:20.58%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length225{height:22.05%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length240{height:23.52%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length255{height:24.99%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length270{height:26.46%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length285{height:27.93%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length300{height:29.4%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length315{height:30.87%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length330{height:32.34%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length345{height:33.81%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length360{height:35.28%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length375{height:36.75%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length390{height:38.22%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length405{height:39.69%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length420{height:41.16%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length435{height:42.63%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length450{height:44.1%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length465{height:45.57%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length480{height:47.04%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length495{height:48.51%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length510{height:49.98%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length525{height:51.45%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length540{height:52.92%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length555{height:54.39%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length570{height:55.86%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length585{height:57.33%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length600{height:58.8%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length615{height:60.27%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length630{height:61.74%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length645{height:63.21%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length660{height:64.68%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length675{height:66.15%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length690{height:67.62%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length705{height:69.09%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length720{height:70.56%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length735{height:72.03%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length750{height:73.5%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length765{height:74.97%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length780{height:76.44%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length795{height:77.91%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length810{height:79.38%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length825{height:80.85%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length840{height:82.32%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length855{height:83.79%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length870{height:85.26%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length885{height:86.73%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length900{height:88.2%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length915{height:89.67%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length930{height:91.14%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length945{height:92.61%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length960{height:94.08%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length975{height:95.55%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length990{height:97.02%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1005{height:98.49%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1020{height:99.96%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1035{height:101.43%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1050{height:102.9%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1065{height:104.37%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1080{height:105.84%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1095{height:107.31%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1110{height:108.78%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1125{height:110.25%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1140{height:111.72%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1155{height:113.19%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1170{height:114.66%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1185{height:116.13%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1200{height:117.6%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1215{height:119.07%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1230{height:120.54%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1245{height:122.01%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1260{height:123.48%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1275{height:124.95%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1290{height:126.42%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1305{height:127.89%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1320{height:129.36%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1335{height:130.83%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1350{height:132.3%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1365{height:133.77%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1380{height:135.24%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1395{height:136.71%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1410{height:138.18%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1425{height:139.65%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-event-container.length1440{height:141.12%}"]
            },] }
];
CalendarSchedulerViewComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: SchedulerConfig },
    { type: CalendarSchedulerUtils },
    { type: DateAdapter },
    { type: MediaMatcher },
    { type: ChangeDetectorRef }
];
CalendarSchedulerViewComponent.propDecorators = {
    viewDays: [{ type: Input }],
    viewDate: [{ type: Input }],
    responsive: [{ type: Input }],
    events: [{ type: Input }],
    hourSegments: [{ type: Input }],
    hourSegmentHeight: [{ type: Input }],
    excludeDays: [{ type: Input }],
    startsWithToday: [{ type: Input }],
    showEventContent: [{ type: Input }],
    showEventActions: [{ type: Input }],
    showEventStatus: [{ type: Input }],
    showSegmentHour: [{ type: Input }],
    zoomEventOnHover: [{ type: Input }],
    dayModifier: [{ type: Input }],
    hourModifier: [{ type: Input }],
    segmentModifier: [{ type: Input }],
    eventModifier: [{ type: Input }],
    refresh: [{ type: Input }],
    locale: [{ type: Input }],
    eventSnapSize: [{ type: Input }],
    snapDraggedEvents: [{ type: Input }],
    weekStartsOn: [{ type: Input }],
    headerTemplate: [{ type: Input }],
    cellTemplate: [{ type: Input }],
    eventTemplate: [{ type: Input }],
    eventTitleTemplate: [{ type: Input }],
    allDayEventTemplate: [{ type: Input }],
    weekendDays: [{ type: Input }],
    dayStartHour: [{ type: Input }],
    dayStartMinute: [{ type: Input }],
    dayEndHour: [{ type: Input }],
    dayEndMinute: [{ type: Input }],
    viewDaysChanged: [{ type: Output }],
    dayHeaderClicked: [{ type: Output }],
    hourClicked: [{ type: Output }],
    segmentClicked: [{ type: Output }],
    eventClicked: [{ type: Output }],
    eventTimesChanged: [{ type: Output }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};

const moment$1 = momentImported;
class CalendarSchedulerHourSegmentComponent {
    constructor() {
        this.hourSegmentHeight = 58;
        this.showHour = false;
        this.segmentClicked = new EventEmitter();
    }
    ngOnInit() {
        this.title = this.title || moment$1(this.segment.date).format('dddd L, LT');
    }
    /**
     * @hidden
     */
    onMouseEnter(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    }
    /**
     * @hidden
     */
    onMouseLeave(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    }
    /**
     * @hidden
     */
    onSegmentClick(mouseEvent, segment) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (segment.events.length === 0 && !segment.isDisabled && !segment.isCancelled) {
            this.segmentClicked.emit({ segment: segment });
        }
    }
}
CalendarSchedulerHourSegmentComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-hour-segment',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-hour-segment"
                [title]="title"
                [ngClass]="segment?.cssClass"
                [class.has-events]="segment.events.length > 0"
                [class.cal-cancelled]="segment.isCancelled"
                [class.cal-disabled]="segment.isDisabled"
                [style.backgroundColor]="segment.backgroundColor"
                [style.height.px]="hourSegmentHeight"
                (mwlClick)="onSegmentClick($event, segment)">
                <div class="cal-scheduler-time unselectable" *ngIf="showHour && segment.events.length === 0">
                    {{ segment.date | calendarDate:'dayViewHour':locale }}
                </div>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                title: title,
                day: day,
                segment: segment,
                locale: locale,
                hourSegmentHeight: hourSegmentHeight,
                showHour: showHour,
                segmentClicked: segmentClicked
            }">
        </ng-template>
    `
            },] }
];
CalendarSchedulerHourSegmentComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    segment: [{ type: Input }],
    locale: [{ type: Input }],
    customTemplate: [{ type: Input }],
    hourSegmentHeight: [{ type: Input }],
    showHour: [{ type: Input }],
    segmentClicked: [{ type: Output }]
};

class CalendarSchedulerHeaderComponent {
    constructor() {
        this.dayHeaderClicked = new EventEmitter();
    }
    /**
     * @hidden
     */
    onDayHeaderClick(mouseEvent, day) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        this.dayHeaderClicked.emit({ day: day });
    }
}
CalendarSchedulerHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-header',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-headers">
                <div class="cal-header aside cal-header-clock align-center">
                    <i class="material-icons md-32" style="margin:auto;">schedule</i>
                </div>

                <div class="cal-header-cols aside">
                    <div
                        class="cal-header"
                        *ngFor="let day of days"
                        [class.cal-past]="day.isPast"
                        [class.cal-today]="day.isToday"
                        [class.cal-future]="day.isFuture"
                        [class.cal-weekend]="day.isWeekend"
                        (mwlClick)="onDayHeaderClick($event, day)">
                        <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>
                        <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>
                    </div>
                </div>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                days: days,
                locale: locale,
                dayHeaderClicked: dayHeaderClicked
            }">
        </ng-template>
    `
            },] }
];
CalendarSchedulerHeaderComponent.propDecorators = {
    days: [{ type: Input }],
    locale: [{ type: Input }],
    customTemplate: [{ type: Input }],
    dayHeaderClicked: [{ type: Output }]
};

const moment$2 = momentImported;
class CalendarSchedulerEventComponent {
    constructor(hostElement, changeDetectorRef) {
        this.hostElement = hostElement;
        this.changeDetectorRef = changeDetectorRef;
        this.showContent = true;
        this.showActions = true;
        this.showStatus = true;
        this.eventClicked = new EventEmitter();
    }
    ngOnInit() {
        this.title = this.title || `${this.event.event.title}, ${this.event.event.content ? `${this.event.event.content},` : null} ${moment$2(this.event.event.start).format('dddd L, LT')}`;
    }
    ngAfterContentChecked() {
        this.changeDetectorRef.detectChanges();
    }
    onMouseEnter() {
        // Maybe do something
    }
    onMouseLeave() {
        // Maybe do something
    }
    /**
     * @hidden
     */
    onEventClick(mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    }
}
CalendarSchedulerEventComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-event"
                [title]="title"
                [style.max-width.px]="container.clientWidth - 4"
                [class.cal-cancelled]="event.event.isCancelled"
                [class.cal-disabled]="event.event.isDisabled"
                [class.cal-not-clickable]="!event.event.isClickable"
                [class.cal-draggable]="event.event.draggable"
                [class.cal-starts-before-day]="event.startsBeforeDay"
                [class.cal-ends-after-day]="event.endsAfterDay"
                [style.backgroundColor]="event.event.color?.secondary"
                [style.borderColor]="event.event.color?.primary"
                (mwlClick)="onEventClick($event, event.event)"
                (mouseenter)="onMouseEnter()"
                (mouseleave)="onMouseLeave()">
                <calendar-scheduler-event-title
                    view="week"
                    [event]="event.event"
                    [showStatus]="showStatus"
                    [showContent]="showContent"
                    [showActions]="showActions"
                    [customTemplate]="eventTitleTemplate">
                </calendar-scheduler-event-title>
                <calendar-scheduler-event-content
                    *ngIf="showContent"
                    [event]="event.event"
                    [eventContainer]="container">
                </calendar-scheduler-event-content>
                <calendar-scheduler-event-actions
                    *ngIf="showActions && showContent && (event.event.isClickable || event.event.isDisabled)"
                    [event]="event.event">
                </calendar-scheduler-event-actions>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                title: title,
                day: day,
                event: event,
                container: container,
                showContent: showContent,
                showActions: showActions,
                showStatus: showStatus,
                eventTitleTemplate: eventTitleTemplate,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
                host: {
                    '[style.height.%]': '100'
                }
            },] }
];
CalendarSchedulerEventComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
CalendarSchedulerEventComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    event: [{ type: Input }],
    container: [{ type: Input }],
    showContent: [{ type: Input }],
    showActions: [{ type: Input }],
    showStatus: [{ type: Input }],
    customTemplate: [{ type: Input }],
    eventTitleTemplate: [{ type: Input }],
    eventClicked: [{ type: Output }]
};

class CalendarSchedulerEventTitleComponent {
    constructor() {
        this.showStatus = true;
        this.showContent = true;
        this.showActions = true;
    }
}
CalendarSchedulerEventTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-title',
                template: `
        <ng-template #defaultTemplate>
            <div
                class="cal-scheduler-event-title"
                [innerHTML]="event.title | schedulerEventTitle:view:event">
            </div>
            <calendar-scheduler-event-actions
                *ngIf="showActions && !showContent && (event.isClickable || event.isDisabled)"
                class="no-content-actions"
                [event]="event">
            </calendar-scheduler-event-actions>
            <div *ngIf="event.status && showStatus"
                class="cal-scheduler-event-status"
                [class.ok]="event.status === 'ok'"
                [class.warning]="event.status === 'warning'"
                [class.danger]="event.status === 'danger'">
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                view: view,
                event: event,
                showStatus: showStatus,
                showContent: showContent,
                showActions: showActions
            }">
        </ng-template>
    `,
                host: {
                    'class': 'cal-scheduler-event-title-container'
                }
            },] }
];
CalendarSchedulerEventTitleComponent.propDecorators = {
    view: [{ type: Input }],
    event: [{ type: Input }],
    showStatus: [{ type: Input }],
    showContent: [{ type: Input }],
    showActions: [{ type: Input }],
    customTemplate: [{ type: Input }]
};

class CalendarSchedulerEventContentComponent {
    constructor(hostElement) {
        this.hostElement = hostElement;
    }
    ngAfterViewInit() {
        setTimeout(() => { this.maxHeight = Math.max(30, this.eventContainer.clientHeight - 70); }, 0);
    }
}
CalendarSchedulerEventContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-content',
                template: `
        <div *ngIf="event.content"
            class="cal-scheduler-event-content"
            [style.max-height.px]="maxHeight"
            [style.white-space]="maxHeight && maxHeight > 30 ? 'normal' : 'nowrap'"
            [innerHTML]="event.content">
        </div>
    `,
                host: {
                    'class': 'cal-scheduler-event-content-container'
                }
            },] }
];
CalendarSchedulerEventContentComponent.ctorParameters = () => [
    { type: ElementRef }
];
CalendarSchedulerEventContentComponent.propDecorators = {
    event: [{ type: Input }],
    eventContainer: [{ type: Input }]
};

class CalendarSchedulerEventActionsComponent {
    constructor() {
        this.actions = [];
    }
    ngOnInit() {
        this.setupActions();
    }
    ngOnChanges(changes) {
        if (changes.event) {
            this.setupActions();
        }
    }
    setupActions() {
        if (this.event.actions) {
            this.actions = this.event.isCancelled
                ? this.event.actions.filter((a) => !a.when || a.when === 'cancelled')
                : this.event.isDisabled
                    ? this.event.actions.filter((a) => !a.when || a.when === 'disabled')
                    : this.event.actions.filter((a) => !a.when || a.when === 'enabled');
        }
    }
    /**
     * @hidden
     */
    onActionClick(mouseEvent, action, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        action.onClick(event);
    }
}
CalendarSchedulerEventActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-actions',
                template: `
        <span *ngIf="event.actions"
            class="cal-scheduler-event-actions">
            <a
                class="cal-scheduler-event-action"
                href="javascript:;"
                *ngFor="let action of actions"
                (mwlClick)="onActionClick($event, action, event)"
                [ngClass]="action.cssClass"
                [innerHtml]="action.label"
                [title]="action.title">
            </a>
        </span>
    `,
                host: {
                    'class': 'cal-scheduler-event-actions-container'
                }
            },] }
];
CalendarSchedulerEventActionsComponent.propDecorators = {
    event: [{ type: Input }]
};

class SchedulerEventTitleFormatter extends CalendarEventTitleFormatter {
}
SchedulerEventTitleFormatter.decorators = [
    { type: Injectable }
];

class SchedulerEventTitlePipe {
    constructor(schedulerEventTitle) {
        this.schedulerEventTitle = schedulerEventTitle;
    }
    transform(title, titleType, event) {
        return this.schedulerEventTitle[titleType](event);
    }
}
SchedulerEventTitlePipe.decorators = [
    { type: Pipe, args: [{
                name: 'schedulerEventTitle'
            },] }
];
SchedulerEventTitlePipe.ctorParameters = () => [
    { type: SchedulerEventTitleFormatter }
];

class CalendarSchedulerDatePipe {
    constructor(dateAdapter, dateFormatter, locale) {
        this.dateAdapter = dateAdapter;
        this.dateFormatter = dateFormatter;
        this.locale = locale;
    }
    transform(date, method, locale = this.locale, weekStartsOn = 0, excludeDays = [], daysInWeek, startsWithToday) {
        if (typeof this.dateFormatter[method] === 'undefined') {
            const allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarDateFormatter.prototype)).filter(iMethod => iMethod !== 'constructor');
            throw new Error(`${method} is not a valid date formatter. Can only be one of ${allowedMethods.join(', ')}`);
        }
        return this.dateFormatter[method]({
            dateAdapter: this.dateAdapter,
            date,
            locale,
            weekStartsOn,
            excludeDays,
            daysInWeek,
            startsWithToday
        });
    }
}
CalendarSchedulerDatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'calendarSchedulerDate'
            },] }
];
CalendarSchedulerDatePipe.ctorParameters = () => [
    { type: DateAdapter },
    { type: CalendarDateFormatter },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

class SchedulerDateFormatter extends CalendarDateFormatter {
    constructor(dateAdapter) {
        super(dateAdapter);
    }
    /**
     * The time formatting down the left hand side of the day view
     */
    dayViewHour({ date, locale }) {
        return new Intl.DateTimeFormat(locale, { hour: 'numeric', minute: 'numeric' }).format(date);
    }
    weekViewTitle({ dateAdapter, date, locale, weekStartsOn, excludeDays, daysInWeek, startsWithToday }) {
        // http://generatedcontent.org/post/59403168016/esintlapi
        const year = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(date);
        const month = new Intl.DateTimeFormat(locale, { month: 'short' }).format(date);
        const dateInner = startsWithToday || daysInWeek < DAYS_IN_WEEK
            ? date
            : dateAdapter.startOfWeek(date, { weekStartsOn: weekStartsOn });
        // var firstDay: number = date.getDate() - date.getDay() + 1; // First day is the day of the month - the day of the week
        let firstDay = dateInner.getDate();
        while (excludeDays.includes(firstDay)) {
            firstDay += 1;
        }
        let lastDay = firstDay + (daysInWeek - 1); // last day is the first day + (daysInWeek - 1)
        while (excludeDays.includes(lastDay)) {
            lastDay += 1;
        }
        let firstDayMonth = month;
        let lastDayMonth = month;
        let firstDayYear = year;
        let lastDayYear = year;
        if (firstDay < 1) {
            const prevMonthDate = new Date(dateInner.getFullYear(), dateInner.getMonth() - 1);
            firstDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(prevMonthDate);
            const daysInPrevMonth = this.daysInMonth(prevMonthDate);
            let i = 0;
            let prevMonthDay = daysInPrevMonth;
            for (i = 0; i < Math.abs(firstDay); i++) {
                prevMonthDay--;
            }
            firstDay = prevMonthDay;
            const prevMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(prevMonthDate);
            if (Number(prevMonthYear) < Number(year)) {
                firstDayYear = prevMonthYear;
            }
        }
        const daysInMonth = this.daysInMonth(dateInner);
        if (lastDay > daysInMonth) {
            const nextMonthDate = new Date(dateInner.getFullYear(), dateInner.getMonth() + 1);
            lastDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(nextMonthDate);
            let i = 0;
            let nextMonthDay = 0;
            for (i = 0; i < (lastDay - daysInMonth); i++) {
                nextMonthDay++;
            }
            lastDay = nextMonthDay;
            const nextMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(nextMonthDate);
            if (Number(nextMonthYear) > Number(year)) {
                lastDayYear = nextMonthYear;
            }
        }
        return `${firstDay}` + (firstDayMonth !== lastDayMonth || lastDay === firstDay ? ' ' + firstDayMonth : '') +
            (firstDayYear !== lastDayYear ? ' ' + firstDayYear : '') +
            (lastDay === firstDay ? '' : ` - ${lastDay} ${lastDayMonth} ${lastDayYear}`);
    }
    daysInMonth(anyDateInMonth) {
        return new Date(anyDateInMonth.getFullYear(), anyDateInMonth.getMonth() + 1, 0).getDate();
    }
}
SchedulerDateFormatter.decorators = [
    { type: Injectable }
];
SchedulerDateFormatter.ctorParameters = () => [
    { type: DateAdapter }
];

const SCHEDULER_CONFIG = new InjectionToken('SchedulerConfig');
function provideSchedulerConfig(config) {
    return new SchedulerConfig(config);
}
const ɵ0 = adapterFactory;
/**
 * The main module of this library. Example usage:
 *
 * ```typescript
 * import { CalendarModule, DateAdapter } from 'angular-calendar';
 * import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';
 * import { SchedulerModule } from 'angular-calendar-scheduler';
 *
 * @NgModule({
 *  imports: [
 *     CalendarModule.forRoot({
 *       provide: DateAdapter,
 *       useFactory: adapterFactory
 *     }),
 *     SchedulerModule.forRoot({ locale: 'en', headerDateFormat: 'daysRange' })
 *   ]
 * })
 * class MyModule {}
 * ```
 *
 */
class SchedulerModule {
    static forRoot(config) {
        return {
            ngModule: SchedulerModule,
            providers: [
                { provide: SCHEDULER_CONFIG, useValue: config },
                { provide: SchedulerConfig, useFactory: provideSchedulerConfig, deps: [SCHEDULER_CONFIG] }
            ]
        };
    }
}
SchedulerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CalendarModule.forRoot({
                        provide: DateAdapter,
                        useFactory: ɵ0
                    })
                ],
                declarations: [
                    CalendarSchedulerViewComponent,
                    CalendarSchedulerHourSegmentComponent,
                    CalendarSchedulerHeaderComponent,
                    CalendarSchedulerEventComponent,
                    CalendarSchedulerEventTitleComponent,
                    CalendarSchedulerEventContentComponent,
                    CalendarSchedulerEventActionsComponent,
                    SchedulerEventTitlePipe,
                    CalendarSchedulerDatePipe
                ],
                providers: [
                    CalendarSchedulerUtils,
                    SchedulerEventTitlePipe,
                    CalendarSchedulerDatePipe,
                    SchedulerEventTitleFormatter,
                    SchedulerDateFormatter
                ],
                exports: [
                    CalendarSchedulerDatePipe,
                    CalendarSchedulerViewComponent,
                    CalendarSchedulerHourSegmentComponent,
                    CalendarSchedulerHeaderComponent,
                    CalendarSchedulerEventComponent,
                    CalendarSchedulerEventTitleComponent,
                    CalendarSchedulerEventContentComponent,
                    CalendarSchedulerEventActionsComponent
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { CalendarSchedulerUtils, CalendarSchedulerViewComponent, DAYS_IN_WEEK, DAYS_OF_WEEK, DEFAULT_EVENT_WIDTH, DEFAULT_HOUR_SEGMENTS, DEFAULT_HOUR_SEGMENT_HEIGHT_PX, HOURS_IN_DAY, MINUTES_IN_HOUR, SCHEDULER_CONFIG, SECONDS_IN_DAY, SchedulerDateFormatter, SchedulerEventTitleFormatter, SchedulerEventTitlePipe, SchedulerModule, addPeriod, endOfPeriod, getDefaultEventEnd, getMinimumEventHeightInMinutes, getMinutesMoved, getSchedulerView, getSchedulerViewDays, getSchedulerViewHourGrid, isDraggedWithinPeriod, provideSchedulerConfig, roundToNearest, shouldFireDroppedEvent, startOfPeriod, subPeriod, trackByDayOrEvent, trackByHour, trackByHourColumn, trackByHourSegment, ɵ0, SchedulerConfig as ɵa, CalendarSchedulerHourSegmentComponent as ɵb, CalendarSchedulerHeaderComponent as ɵc, CalendarSchedulerEventComponent as ɵd, CalendarSchedulerEventTitleComponent as ɵe, CalendarSchedulerEventContentComponent as ɵf, CalendarSchedulerEventActionsComponent as ɵg, CalendarSchedulerDatePipe as ɵh };
//# sourceMappingURL=angular-calendar-scheduler.js.map
