{"version":3,"file":"schedule.component.d.ts","sources":["schedule.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, ViewContainerRef, QueryList, Renderer2, Injector } from '@angular/core';\nimport { IComponentBase } from '@syncfusion/ej2-angular-base';\nimport { Schedule } from '@syncfusion/ej2-schedule';\nimport { ViewsDirective } from './views.directive';\nimport { ResourcesDirective } from './resources.directive';\nimport { HeaderRowsDirective } from './headerrows.directive';\nexport declare const inputs: string[];\nexport declare const outputs: string[];\nexport declare const twoWays: string[];\n/**\n * `ej-schedule` represents the Angular Schedule Component.\n * ```html\n * <ejs-schedule></ejs-schedule>\n * ```\n */\nexport declare class ScheduleComponent extends Schedule implements IComponentBase {\n    private ngEle;\n    private srenderer;\n    private viewContainerRef;\n    private injector;\n    context: any;\n    tagObjects: any;\n    actionBegin: any;\n    actionComplete: any;\n    actionFailure: any;\n    cellClick: any;\n    cellDoubleClick: any;\n    created: any;\n    dataBinding: any;\n    dataBound: any;\n    destroyed: any;\n    drag: any;\n    dragStart: any;\n    dragStop: any;\n    eventClick: any;\n    eventRendered: any;\n    hover: any;\n    moreEventsClick: any;\n    navigating: any;\n    popupClose: any;\n    popupOpen: any;\n    renderCell: any;\n    resizeStart: any;\n    resizeStop: any;\n    resizing: any;\n    select: any;\n    currentViewChange: any;\n    selectedDateChange: any;\n    childViews: QueryList<ViewsDirective>;\n    childResources: QueryList<ResourcesDirective>;\n    childHeaderRows: QueryList<HeaderRowsDirective>;\n    tags: string[];\n    /**\n     * It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\n     * the date header cells. The field that can be accessed via this template is `date`.\n     *\n     * {% codeBlock src='schedule/dateHeaderTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    dateHeaderTemplate: any;\n    /**\n     * It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\n     * the day header cells. This template is only applicable for year view header cells.\n     *\n     * {% codeBlock src='schedule/dayHeaderTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    dayHeaderTemplate: any;\n    /**\n     * The template option which is used to render the customized work cells on the Schedule. Here, the template accepts either\n     *  the string or HTMLElement as template design and then the parsed design is displayed onto the work cells.\n     *  The fields accessible via template are as follows.\n     * * date\n     * * groupIndex\n     * * type\n     *\n     * Refer to the below code snippet.\n     *\n     *{% codeBlock src='schedule/cellTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    cellTemplate: any;\n    /**\n     * It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\n     * the month date cells. This template is only applicable for month view day cells.\n     *\n     * {% codeBlock src='schedule/cellHeaderTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    cellHeaderTemplate: any;\n    eventSettings_tooltipTemplate: any;\n    eventSettings_template: any;\n    /**\n     * The template option to render the customized editor window. The form elements defined within this template should be accompanied\n     *  with `e-field` class, so as to fetch and process it from internally.\n     *\n     * {% codeBlock src='schedule/editorTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    editorTemplate: any;\n    /**\n     * It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\n     * the month header cells. This template is only applicable for year view header cells.\n     *\n     * {% codeBlock src='schedule/monthHeaderTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    monthHeaderTemplate: any;\n    timeScale_minorSlotTemplate: any;\n    timeScale_majorSlotTemplate: any;\n    /**\n     * Template option to customize the resource header bar. Here, the template accepts either\n     *  the string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\n     * The following can be accessible via template.\n     * * resource - All the resource fields.\n     * * resourceData - object collection of current resource.\n     *\n     * Refer to the below code snippet.\n     *\n     *{% codeBlock src='schedule/resourceHeaderTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    resourceHeaderTemplate: any;\n    /**\n     * Template option to customize the header indent bar. Here, the template accepts either\n     *  the string or HTMLElement as template design and then the parsed design is displayed onto the header indent cell.\n     *\n     * Refer to the below code snippet.\n     *\n     *{% codeBlock src='schedule/headerIndentTemplate/index.md' %}{% endcodeBlock %}\n     *\n     * @default null\n     */\n    headerIndentTemplate: any;\n    quickInfoTemplates_header: any;\n    quickInfoTemplates_content: any;\n    quickInfoTemplates_footer: any;\n    group_headerTooltipTemplate: any;\n    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngAfterContentChecked(): void;\n    registerEvents: (eventList: string[]) => void;\n    addTwoWay: (propList: string[]) => void;\n}\n"]}