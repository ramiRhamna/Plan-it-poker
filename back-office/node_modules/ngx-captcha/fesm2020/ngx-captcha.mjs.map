{"version":3,"file":"ngx-captcha.mjs","sources":["../../src/lib/services/script.service.ts","../../src/lib/components/base-recaptcha.component.ts","../../src/lib/models/recaptcha-type.enum.ts","../../src/lib/components/invisible-recaptcha.component.ts","../../src/lib/components/recaptcha-2.component.ts","../../src/lib/services/recaptcha_v3.service.ts","../../src/lib/ngx-captcha.module.ts","../../src/public_api.ts","../../src/ngx-captcha.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\ndeclare var document: any;\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\r\n    protected readonly windowGrecaptcha = 'grecaptcha';\r\n\r\n    /**\r\n    * Name of the global callback\r\n    */\r\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n\r\n    protected readonly globalDomain: string = 'recaptcha.net';\r\n\r\n    protected readonly defaultDomain: string = 'google.com';\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerCaptchaScript(useGlobalDomain: boolean, render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run(() => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\r\n            onLoad.bind(this, window[this.windowGrecaptcha])\r\n        ));\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(): void {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    private grecaptchaScriptLoaded(): boolean {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    private getLanguageParam(hl?: string): string {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n\r\n        return `&hl=${hl}`;\r\n    }\r\n\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    private getCaptchaScriptUrl(useGlobalDomain: boolean, render: string, language?: string): string {\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injector,\r\n  InjectFlags,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  Directive,\r\n} from \"@angular/core\";\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NgControl,\r\n  AbstractControl,\r\n} from \"@angular/forms\";\r\nimport { Type } from \"@angular/core\";\r\n\r\nimport { ReCaptchaType } from \"../models/recaptcha-type.enum\";\r\nimport { ScriptService } from \"../services/script.service\";\r\n\r\n@Directive()\r\nexport abstract class BaseReCaptchaComponent\r\n  implements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked\r\n{\r\n  /**\r\n   * Prefix of the captcha element\r\n   */\r\n  protected readonly captchaElemPrefix = \"ngx_captcha_id_\";\r\n\r\n  private setupCaptcha: boolean = true;\r\n\r\n  /**\r\n   * Google's site key.\r\n   * You can find this under https://www.google.com/recaptcha\r\n   */\r\n  @Input() siteKey: string;\r\n\r\n  /**\r\n   * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n   */\r\n  @Input() useGlobalDomain: boolean = false;\r\n\r\n  /**\r\n   * Type\r\n   */\r\n  @Input() type: \"audio\" | \"image\" = \"image\";\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  /**\r\n   * Tab index\r\n   */\r\n  @Input() tabIndex = 0;\r\n\r\n  /**\r\n   * Called when captcha receives successful response.\r\n   * Captcha response token is passed to event.\r\n   */\r\n  @Output() success = new EventEmitter<string>();\r\n\r\n  /**\r\n   * Called when captcha is loaded. Event receives id of the captcha\r\n   */\r\n  @Output() load = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Called when captcha is reset.\r\n   */\r\n  @Output() reset = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n   */\r\n  @Output() ready = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Error callback\r\n   */\r\n  @Output() error = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Expired callback\r\n   */\r\n  @Output() expire = new EventEmitter<void>();\r\n\r\n  abstract captchaWrapperElem?: ElementRef;\r\n\r\n  /**\r\n   * Indicates if captcha should be set on load\r\n   */\r\n  private setupAfterLoad = false;\r\n\r\n  /**\r\n   * Captcha element\r\n   */\r\n  protected captchaElem?: HTMLElement;\r\n\r\n  /**\r\n   * Id of the captcha elem\r\n   */\r\n  protected captchaId?: number;\r\n\r\n  /**\r\n   * Holds last response value\r\n   */\r\n  protected currentResponse?: string;\r\n\r\n  /**\r\n   * If enabled, captcha will reset after receiving success response. This is useful\r\n   * when invisible captcha need to be resolved multiple times on same page\r\n   */\r\n  protected resetCaptchaAfterSuccess = false;\r\n\r\n  /**\r\n   * Captcha type\r\n   */\r\n  protected abstract recaptchaType: ReCaptchaType;\r\n\r\n  /**\r\n   * Required by ControlValueAccessor\r\n   */\r\n  protected onChange: (value: string | undefined) => void;\r\n  protected onTouched: (value: string | undefined) => void;\r\n\r\n  /**\r\n   * Indicates if captcha is loaded\r\n   */\r\n  public isLoaded = false;\r\n\r\n  /**\r\n   * Reference to global reCaptcha API\r\n   */\r\n  public reCaptchaApi?: any;\r\n\r\n  /**\r\n   * Id of the DOM element wrapping captcha\r\n   */\r\n  public captchaElemId?: string;\r\n\r\n  /**\r\n   * Form Control to be enable usage in reactive forms\r\n   */\r\n  public control?: AbstractControl | null;\r\n\r\n  protected constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.control = this.injector.get<NgControl | undefined>(\r\n      NgControl,\r\n      undefined,\r\n      InjectFlags.Optional\r\n    )?.control;\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.setupCaptcha) {\r\n      this.setupCaptcha = false;\r\n      this.setupComponent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n   */\r\n  protected abstract getCaptchaProperties(): any;\r\n\r\n  /**\r\n   * Used for captcha specific setup\r\n   */\r\n  protected abstract captchaSpecificSetup(): void;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // cleanup scripts if language changed because they need to be reloaded\r\n    if (changes && changes.hl) {\r\n      // cleanup scripts when language changes\r\n      if (\r\n        !changes.hl.firstChange &&\r\n        changes.hl.currentValue !== changes.hl.previousValue\r\n      ) {\r\n        this.scriptService.cleanup();\r\n      }\r\n    }\r\n\r\n    if (changes && changes.useGlobalDomain) {\r\n      // cleanup scripts when domain changes\r\n      if (\r\n        !changes.useGlobalDomain.firstChange &&\r\n        changes.useGlobalDomain.currentValue !==\r\n          changes.useGlobalDomain.previousValue\r\n      ) {\r\n        this.scriptService.cleanup();\r\n      }\r\n    }\r\n\r\n    this.setupCaptcha = true;\r\n  }\r\n\r\n  /**\r\n   * Gets captcha response as per reCaptcha docs\r\n   */\r\n  getResponse(): string {\r\n    return this.reCaptchaApi.getResponse(this.captchaId);\r\n  }\r\n\r\n  /**\r\n   * Gets Id of captcha widget\r\n   */\r\n  getCaptchaId(): number | undefined {\r\n    return this.captchaId;\r\n  }\r\n\r\n  /**\r\n   * Resets captcha\r\n   */\r\n  resetCaptcha(): void {\r\n    this.zone.run(() => {\r\n      // reset captcha using Google js api\r\n      this.reCaptchaApi.reset();\r\n\r\n      // required due to forms\r\n      this.onChange(undefined);\r\n      this.onTouched(undefined);\r\n\r\n      // trigger reset event\r\n      this.reset.next();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets last submitted captcha response\r\n   */\r\n  getCurrentResponse(): string | undefined {\r\n    return this.currentResponse;\r\n  }\r\n\r\n  /**\r\n   * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n   */\r\n  reloadCaptcha(): void {\r\n    this.setupComponent();\r\n  }\r\n\r\n  protected ensureCaptchaElem(captchaElemId: string): void {\r\n    const captchaElem = document.getElementById(captchaElemId);\r\n\r\n    if (!captchaElem) {\r\n      throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n    }\r\n\r\n    // assign captcha alem\r\n    this.captchaElem = captchaElem;\r\n  }\r\n\r\n  /**\r\n   * Responsible for instantiating captcha element\r\n   */\r\n  protected renderReCaptcha(): void {\r\n    // run outside angular zone due to timeout issues when testing\r\n    // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n    this.zone.runOutsideAngular(() => {\r\n      // to fix reCAPTCHA placeholder element must be an element or id\r\n      // https://github.com/Enngage/ngx-captcha/issues/96\r\n      setTimeout(() => {\r\n        this.captchaId = this.reCaptchaApi.render(\r\n          this.captchaElemId,\r\n          this.getCaptchaProperties()\r\n        );\r\n        this.ready.next();\r\n      }, 0);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called when captcha receives response\r\n   * @param callback Callback\r\n   */\r\n  protected handleCallback(callback: any): void {\r\n    this.currentResponse = callback;\r\n    this.success.next(callback);\r\n\r\n    this.zone.run(() => {\r\n      this.onChange(callback);\r\n      this.onTouched(callback);\r\n    });\r\n\r\n    if (this.resetCaptchaAfterSuccess) {\r\n      this.resetCaptcha();\r\n    }\r\n  }\r\n\r\n  private getPseudoUniqueNumber(): number {\r\n    return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n  }\r\n\r\n  private setupComponent(): void {\r\n    // captcha specific setup\r\n    this.captchaSpecificSetup();\r\n\r\n    // create captcha wrapper\r\n    this.createAndSetCaptchaElem();\r\n\r\n    this.scriptService.registerCaptchaScript(\r\n      this.useGlobalDomain,\r\n      \"explicit\",\r\n      (grecaptcha) => {\r\n        this.onloadCallback(grecaptcha);\r\n      },\r\n      this.hl\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when google's recaptcha script is ready\r\n   */\r\n  private onloadCallback(grecapcha: any): void {\r\n    // assign reference to reCaptcha Api once its loaded\r\n    this.reCaptchaApi = grecapcha;\r\n\r\n    if (!this.reCaptchaApi) {\r\n      throw Error(`ReCaptcha Api was not initialized correctly`);\r\n    }\r\n\r\n    // loaded flag\r\n    this.isLoaded = true;\r\n\r\n    // fire load event\r\n    this.load.next();\r\n\r\n    // render captcha\r\n    this.renderReCaptcha();\r\n\r\n    // setup component if it was flagged as such\r\n    if (this.setupAfterLoad) {\r\n      this.setupAfterLoad = false;\r\n      this.setupComponent();\r\n    }\r\n  }\r\n\r\n  private generateNewElemId(): string {\r\n    return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n  }\r\n\r\n  private createAndSetCaptchaElem(): void {\r\n    // generate new captcha id\r\n    this.captchaElemId = this.generateNewElemId();\r\n\r\n    if (!this.captchaElemId) {\r\n      throw Error(`Captcha elem Id is not set`);\r\n    }\r\n\r\n    if (!this.captchaWrapperElem) {\r\n      throw Error(`Captcha DOM element is not initialized`);\r\n    }\r\n\r\n    // remove old html\r\n    this.captchaWrapperElem.nativeElement.innerHTML = \"\";\r\n\r\n    // create new wrapper for captcha\r\n    const newElem = this.renderer.createElement(\"div\");\r\n    newElem.id = this.captchaElemId;\r\n\r\n    this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n    // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n    // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n    setTimeout(() => {\r\n      // update captcha elem\r\n      if (this.captchaElemId) {\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n   * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n   */\r\n  public writeValue(obj: any): void {}\r\n\r\n  /**\r\n   * This method helps us tie together recaptcha and our formControl values\r\n   */\r\n  public registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * At some point we might be interested whether the user has touched our component\r\n   */\r\n  public registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Handles error callback\r\n   */\r\n  protected handleErrorCallback(): void {\r\n    this.zone.run(() => {\r\n      this.onChange(undefined);\r\n      this.onTouched(undefined);\r\n    });\r\n\r\n    this.error.next();\r\n  }\r\n\r\n  /**\r\n   * Handles expired callback\r\n   */\r\n  protected handleExpireCallback(): void {\r\n    this.expire.next();\r\n\r\n    // reset captcha on expire callback\r\n    this.resetCaptcha();\r\n  }\r\n}\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false }) captchaWrapperElem: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): void {\r\n    // execute captcha\r\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size,\r\n      'theme': this.theme\r\n    };\r\n  }\r\n\r\n\r\n}\r\n\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReCaptcha2Component),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false}) captchaWrapperElem: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService,\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    window[this.windowOnErrorCallbackProperty] = {};\r\n    window[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n  }\r\n}\r\n\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class ReCaptchaV3Service {\r\n  constructor(protected scriptService: ScriptService, protected zone: NgZone) {}\r\n\r\n  /**\r\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param callback Callback function to to handle token\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   * @param errorCallback Optional Callback function to handle errors\r\n   */\r\n  execute(\r\n    siteKey: string,\r\n    action: string,\r\n    callback: (token: string) => void,\r\n    config?: {\r\n      useGlobalDomain: boolean;\r\n    },\r\n    errorCallback?: (error: any) => void\r\n  ): void {\r\n    this.executeAsPromise(siteKey, action, config)\r\n      .then(callback)\r\n      .catch((error) => errorCallback ? errorCallback(error) : console.error(error));\r\n  }\r\n\r\n  /**\r\n   * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   */\r\n  executeAsPromise(\r\n    siteKey: string,\r\n    action: string,\r\n    config?: {\r\n      useGlobalDomain: boolean;\r\n    }\r\n  ): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n\r\n      const onRegister = grecaptcha => {\r\n        this.zone.runOutsideAngular(() => {\r\n          try {\r\n            grecaptcha\r\n              .execute(siteKey, { action })\r\n              .then(token => this.zone.run(() => resolve(token)));\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      };\r\n\r\n      this.scriptService.registerCaptchaScript(\r\n        useGlobalDomain,\r\n        siteKey,\r\n        onRegister\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\r\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\r\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\r\nimport { ScriptService } from './services/script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    ReCaptchaV3Service\r\n  ],\r\n  exports: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ]\r\n})\r\nexport class NgxCaptchaModule {\r\n}\r\n\r\n\r\n","/*\r\n * Public API\r\n */\r\n\r\nexport * from './lib/index';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}